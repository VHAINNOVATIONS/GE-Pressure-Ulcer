#!/usr/bin/env python
# -*- coding: CP1252 -*-
#
# generated by wxGlade 0.6.8 (standalone edition) on Thu Apr 03 14:47:13 2014
#
import gevxlpy.util.configuration as cfg
import gevxl.gui_wx as gui_wx
import os
import errno
import wx
import wx.lib.mixins.inspection
import wx.lib.masked.timectrl
import wx.lib.masked.numctrl
import wx.gizmos
import wx.calendar
import wx.lib.scrolledpanel
import sys
import util
import subprocess
from wx.lib.agw.aui import AuiNotebook
import wx.lib.agw.aui as aui
from pprint import pprint
from datetime import datetime
from datetime import time
from datetime import timedelta
from ObjectListView import ObjectListView, ColumnDefn
import matplotlib
matplotlib.use('WXAgg')
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.figure import Figure
import ConfigParser
from change_password_dialog import ChangePasswordDialog
from logon import *
from database import *
from olv_dialog import *
from olv_dialog_controller import OlvDialogController
from patient_identification import *
from patient_identification_olv import *
from system_configuration import SystemConfiguration
from system_configuration_olv import OlvSystemConfiguration, OlvSystemConfigurationCols
from system_configuration_controller import SystemConfigurationController
from wound_assessment import WoundAssessment
from wound_assessment_controller import WoundAssessmentController
from assessment_session import AssessmentSession
from assessment_session_olv import OlvAssessmentSession
from assessment_session_olv import OlvAssessmentSessionCols
from assessment_session_controller import AssessmentSessionController
from add_modify_wound_dialog import AddModifyWoundDialog
from wound_assessment_dialog import WoundAssessmentDialog
from algorithm import Algorithm
from algorithm_olv import OlvAlgorithm, OlvAlgorithmCols
from algorithm_dialog import AlgorithmDialog
from experiment_dialog import ExperimentDialog
from experiment import Experiment
from experiment_controller import ExperimentController
from wound_assessment_controller import WoundAssessmentController
from clinical_wound_controller import ClinicalWoundController
from clinical_wound_assessment import ClinicalWoundAssessment
from assessment_measurements import AssessmentMeasurements
from assessment_measurements_olv import OlvAssessmentMeasurements, OlvAssessmentMeasurementsCols
from assessment_measurements_controller import AssessmentMeasurementsController
from assessment_segmentation import AssessmentSegmentation
from assessment_segmentation_olv import OlvAssessmentSegmentation, OlvAssessmentSegmentationCols
from assessment_segmentation_controller import AssessmentSegmentationController
from assessment_temperature import AssessmentTemperature
from assessment_temperature_olv import OlvAssessmentTemperature, OlvAssessmentTemperatureCols
from assessment_temperature_controller import AssessmentTemperatureController
from pu_file_director import PUFileDirector
from biochemical_collection import BiochemicalCollection
from assessment_multi_camera_canvases import AssessmentMultiCameraCanvases
from touchscreen import TouchFrame
# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

db = ""
cameraAlgorithm = "assessment camera"
measurementAlgorithm = "assessment measure"

class MainFrame(wx.Frame):
    """
    This class implements the main window (or frame) for the Assessment System GUI.
    It defines the window, the menubars, the tabbed notebook panes, and a status line.
    For the Assessment GUI the notebook panes consist of a collection pane and a clinical
    pane. The collection pane will contain a GLCanvas which will display the video from
    the depth camera.
    Methods:
        __init__(*args, **kwds) - creates the widgets in the frame and performs initialization
        __set_properties() - set various properties of the widgets
        __do_layout() - lays out the widgets
        DoNewPatient(event) - Menu handler for adding new patients
        DoSelectPatient(event) - Menu handler for selecting a patient to record
    """
    def __init__(self, *args, **kwds):
        """
        Creates the widgets in the frame and performs initialization.
        Also, creates and attaches an OpenGL canvas for the camera process to use.
        """
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.CAPTION | wx.CLOSE_BOX | wx.MINIMIZE_BOX | wx.MAXIMIZE_BOX | wx.SYSTEM_MENU | wx.RESIZE_BORDER | wx.TAB_TRAVERSAL | wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.main_frame_menubar = wx.MenuBar()
        self.mainFileMenu = wx.Menu()
        self.exitFileMenuItem = wx.MenuItem(self.mainFileMenu, wx.ID_ANY, _("Exit"), "", wx.ITEM_NORMAL)
        self.mainFileMenu.AppendItem(self.exitFileMenuItem)
        self.main_frame_menubar.Append(self.mainFileMenu, _("File"))
        self.mainPatientMenu = wx.Menu()
        self.newPatientMenuItem = wx.MenuItem(self.mainPatientMenu, wx.ID_ANY, _("New/Modify..."), "", wx.ITEM_NORMAL)
        self.mainPatientMenu.AppendItem(self.newPatientMenuItem)
        self.selectPatientMenuItem = wx.MenuItem(self.mainPatientMenu, wx.ID_ANY, _("Select..."), "", wx.ITEM_NORMAL)
        self.mainPatientMenu.AppendItem(self.selectPatientMenuItem)
        self.newWoundMenuItem = wx.MenuItem(self.mainPatientMenu, wx.ID_ANY, _("New/Modify/Delete Wound..."), "", wx.ITEM_NORMAL)
        self.mainPatientMenu.AppendItem(self.newWoundMenuItem)
        self.newAssessmentMenuItem = wx.MenuItem(self.mainPatientMenu, wx.ID_ANY, _("New/Modify/Delete Assessment..."), "", wx.ITEM_NORMAL)
        self.mainPatientMenu.AppendItem(self.newAssessmentMenuItem)
        self.main_frame_menubar.Append(self.mainPatientMenu, _("Patient"))
        self.mainAlgorithmMenu = wx.Menu()
        self.newAlgorithmItem = wx.MenuItem(self.mainAlgorithmMenu, wx.ID_ANY, _("New/Modify/Delete Algorithm"), "", wx.ITEM_NORMAL)
        self.mainAlgorithmMenu.AppendItem(self.newAlgorithmItem)
        self.newExperimentItem = wx.MenuItem(self.mainAlgorithmMenu, wx.ID_ANY, _("New/Modify/Delete Experiment..."), "", wx.ITEM_NORMAL)
        self.mainAlgorithmMenu.AppendItem(self.newExperimentItem)
        self.main_frame_menubar.Append(self.mainAlgorithmMenu, _("Algorithm"))
        self.mainAdminMenu = wx.Menu()
        self.changePasswordItem = wx.MenuItem(self.mainAdminMenu, wx.ID_ANY, _("Change Password..."), "", wx.ITEM_NORMAL)
        self.mainAdminMenu.AppendItem(self.changePasswordItem)
        self.manageUsersItem = wx.MenuItem(self.mainAdminMenu, wx.ID_ANY, _("Manage Users..."), "", wx.ITEM_NORMAL)
        self.mainAdminMenu.AppendItem(self.manageUsersItem)
        self.accessControlItem = wx.MenuItem(self.mainAdminMenu, wx.ID_ANY, _("Access Control..."), "", wx.ITEM_NORMAL)
        self.mainAdminMenu.AppendItem(self.accessControlItem)
        self.newSystemConfiguration = wx.MenuItem(self.mainAdminMenu, wx.ID_ANY, _("System Configuration..."), "", wx.ITEM_NORMAL)
        self.mainAdminMenu.AppendItem(self.newSystemConfiguration)
        self.main_frame_menubar.Append(self.mainAdminMenu, _("Admin"))
        self.mainHelpMenu = wx.Menu()
        self.main_frame_menubar.Append(self.mainHelpMenu, _("Help"))
        self.SetMenuBar(self.main_frame_menubar)
        # Menu Bar end
        self.main_frame_statusbar = self.CreateStatusBar(1, 0)
        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.assessment_notebook = AuiNotebook(self.panel_1, wx.ID_ANY, style=0)
        self.chemical_collection_pane = wx.Panel(self.assessment_notebook, wx.ID_ANY)
        self.chem_plot_panel = wx.Panel(self.chemical_collection_pane, wx.ID_ANY)
        self.ch_sampling_label = wx.StaticText(self.chemical_collection_pane, wx.ID_ANY, _("Sampling Plot (Impedance vs. Frequency)"), style=wx.ALIGN_CENTRE)
        self.ch_patient_label = wx.StaticText(self.chemical_collection_pane, wx.ID_ANY, _("Patient:"))
        self.ch_patient_name = wx.TextCtrl(self.chemical_collection_pane, wx.ID_ANY, _("None"), style=wx.TE_READONLY)
        self.ch_patient_select_button = wx.Button(self.chemical_collection_pane, wx.ID_ANY, _("Select"))
        self.ch_wound_dropdown_label_copy = wx.StaticText(self.chemical_collection_pane, wx.ID_ANY, _("Wound Location:"))
        self.ch_wound_loc = wx.ComboBox(self.chemical_collection_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        self.ch_wound_new_button = wx.Button(self.chemical_collection_pane, wx.ID_ANY, _("New"))
        self.ch_assessement_dropdown_label = wx.StaticText(self.chemical_collection_pane, wx.ID_ANY, _("Assessment Number:"))
        self.ch_assessment_id = wx.ComboBox(self.chemical_collection_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.ch_assessment_new_button = wx.Button(self.chemical_collection_pane, wx.ID_NEW, "")
        self.baseline_label = wx.StaticText(self.chemical_collection_pane, wx.ID_ANY, _("Baseline Sampling"), style=wx.ALIGN_CENTRE)
        self.ch_baseline_msg = wx.TextCtrl(self.chemical_collection_pane, wx.ID_ANY, "", style=wx.TE_CENTRE)
        self.baseline_start_stop_button = wx.Button(self.chemical_collection_pane, wx.ID_ANY, _("Start  Baseline Sampling"))
        self.baseline_reset_button = wx.Button(self.chemical_collection_pane, wx.ID_ANY, _("Reset"))
        self.chemical_wound_label = wx.StaticText(self.chemical_collection_pane, wx.ID_ANY, _("Wound Sampling"), style=wx.ALIGN_CENTRE)
        self.ch_wound_msg = wx.TextCtrl(self.chemical_collection_pane, wx.ID_ANY, "", style=wx.TE_CENTRE)
        self.wound_start_stop_button = wx.Button(self.chemical_collection_pane, wx.ID_ANY, _("Start Wound Sampling"))
        self.wound_reset_button = wx.Button(self.chemical_collection_pane, wx.ID_ANY, _("Reset"))
        self.visual_collection_pane = wx.Panel(self.assessment_notebook, wx.ID_ANY)
        self.rgb_video_panel = wx.Panel(self.visual_collection_pane, wx.ID_ANY)
        self.rgb_video_panel_label = wx.StaticText(self.visual_collection_pane, wx.ID_ANY, _("RGB Video Feed"), style=wx.ALIGN_CENTRE)
        self.depth_video_panel = wx.Panel(self.visual_collection_pane, wx.ID_ANY)
        self.thermal_video_panel = wx.Panel(self.visual_collection_pane, wx.ID_ANY)
        self.visual_depth_label = wx.StaticText(self.visual_collection_pane, wx.ID_ANY, _("Depth Video Feed"))
        self.visual_thermal_label = wx.StaticText(self.visual_collection_pane, wx.ID_ANY, _("Thermal Video Feed"))
        self.cv_patient_label = wx.StaticText(self.visual_collection_pane, wx.ID_ANY, _("Patient:"))
        self.patient_name = wx.TextCtrl(self.visual_collection_pane, wx.ID_ANY, _("None"), style=wx.TE_READONLY)
        self.cv_patient_select_button = wx.Button(self.visual_collection_pane, wx.ID_ANY, _("Select"))
        self.cv_wound_dropdown_label = wx.StaticText(self.visual_collection_pane, wx.ID_ANY, _("Wound Location:"))
        self.wound_loc = wx.ComboBox(self.visual_collection_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        self.cv_wound_new_button = wx.Button(self.visual_collection_pane, wx.ID_ANY, _("New"))
        self.cv_assessement_dropdown_label = wx.StaticText(self.visual_collection_pane, wx.ID_ANY, _("Assessment Number:"))
        self.cv_assessment_id = wx.ComboBox(self.visual_collection_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.cv_assessment_new_button = wx.Button(self.visual_collection_pane, wx.ID_NEW, "")
        self.start_stop_button = wx.Button(self.visual_collection_pane, wx.ID_ANY, _("Record"))
        self.cv_reset_button = wx.Button(self.visual_collection_pane, wx.ID_ANY, _("Reset"))
        self.preview_button = wx.Button(self.visual_collection_pane, wx.ID_ANY, _("Preview"))
        self.visual_msg = wx.TextCtrl(self.visual_collection_pane, wx.ID_ANY, "")
        self.cv_grid_uc = wx.Button(self.visual_collection_pane, 801, _("Upper\n(Not Taken)"))
        self.cv_grid_ml = wx.Button(self.visual_collection_pane, 803, _("Left\n(Not Taken)"))
        self.cv_grid_mc = wx.Button(self.visual_collection_pane, 804, _("Center\n(Not Taken)"))
        self.cv_grid_mr = wx.Button(self.visual_collection_pane, 805, _("Right\n(Not Taken)"))
        self.cv_grid_lc = wx.Button(self.visual_collection_pane, 807, _("Lower\n(Not Taken)"))
        self.multi_spectral_collection_pane = wx.Panel(self.assessment_notebook, wx.ID_ANY)
        self.rgb_video_panel_copy = wx.Panel(self.multi_spectral_collection_pane, wx.ID_ANY)
        self.rgb_video_panel_label_copy = wx.StaticText(self.multi_spectral_collection_pane, wx.ID_ANY, _("RGB Video Feed"), style=wx.ALIGN_CENTRE)
        self.multi_video_panel = wx.Panel(self.multi_spectral_collection_pane, wx.ID_ANY)
        self.multi_video_label = wx.StaticText(self.multi_spectral_collection_pane, wx.ID_ANY, _("Multi-Spectral Camera Image"), style=wx.ALIGN_CENTRE)
        self.ms_patient_label = wx.StaticText(self.multi_spectral_collection_pane, wx.ID_ANY, _("Patient:"))
        self.ms_patient_name = wx.TextCtrl(self.multi_spectral_collection_pane, wx.ID_ANY, _("None"), style=wx.TE_READONLY)
        self.ms_patient_select_button = wx.Button(self.multi_spectral_collection_pane, wx.ID_ANY, _("Select"))
        self.ms_wound_dropdown_label = wx.StaticText(self.multi_spectral_collection_pane, wx.ID_ANY, _("Wound Location:"))
        self.ms_wound_loc = wx.ComboBox(self.multi_spectral_collection_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        self.ms_wound_new_button = wx.Button(self.multi_spectral_collection_pane, wx.ID_ANY, _("New"))
        self.ms_assessement_dropdown_label = wx.StaticText(self.multi_spectral_collection_pane, wx.ID_ANY, _("Assessment Number:"))
        self.ms_assessment_id = wx.ComboBox(self.multi_spectral_collection_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.ms_assessment_new_button = wx.Button(self.multi_spectral_collection_pane, wx.ID_NEW, "")
        self.ms_snapshot_button = wx.Button(self.multi_spectral_collection_pane, wx.ID_ANY, _("Snapshot"))
        self.ms_reset_button = wx.Button(self.multi_spectral_collection_pane, wx.ID_ANY, _("Reset"))
        self.ms_preview_button = wx.Button(self.multi_spectral_collection_pane, wx.ID_ANY, _("Preview"))
        self.ms_msg = wx.TextCtrl(self.multi_spectral_collection_pane, wx.ID_ANY, "")
        self.analysis_measurements_pane = wx.Panel(self.assessment_notebook, wx.ID_ANY)
        self.wm_3d_panel = wx.Panel(self.analysis_measurements_pane, wx.ID_ANY)
        self.wm3d_label = wx.StaticText(self.analysis_measurements_pane, wx.ID_ANY, _("Wound 3-D Reconstruction"), style=wx.ALIGN_CENTRE)
        self.wm_no_overlay_radio_btn = wx.RadioButton(self.analysis_measurements_pane, wx.ID_ANY, _("No Overlay"), style=wx.RB_GROUP)
        self.wm_rgb_radio_btn = wx.RadioButton(self.analysis_measurements_pane, wx.ID_ANY, _("Tissue Type Texture Mapping"))
        self.wm_thermal_radio_btn = wx.RadioButton(self.analysis_measurements_pane, wx.ID_ANY, _("Thermal Texture Mapping"))
        self.wound_measurement_notebook = wx.Notebook(self.analysis_measurements_pane, wx.ID_ANY, style=0)
        self.wm_config_pane = wx.Panel(self.wound_measurement_notebook, wx.ID_ANY)
        self.wm_results_pane = wx.Panel(self.wound_measurement_notebook, wx.ID_ANY)
        self.wm_patient_label = wx.StaticText(self.wm_results_pane, wx.ID_ANY, _("Patient:"))
        self.wm_patient_name = wx.TextCtrl(self.wm_results_pane, wx.ID_ANY, _("None"), style=wx.TE_READONLY)
        self.wm_patient_select_button = wx.Button(self.wm_results_pane, wx.ID_ANY, _("Select"))
        self.wm_wound_dropdown_label = wx.StaticText(self.wm_results_pane, wx.ID_ANY, _("Wound Location:"))
        self.wm_wound_loc = wx.ComboBox(self.wm_results_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        self.wm_assessement_dropdown_label = wx.StaticText(self.wm_results_pane, wx.ID_ANY, _("Assessment Number:"))
        self.wm_assessment_id = wx.ComboBox(self.wm_results_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.wm_reslts_label = wx.StaticText(self.wm_results_pane, wx.ID_ANY, _("Computed Results"))
        self.wm_l_label = wx.StaticText(self.wm_results_pane, wx.ID_ANY, _("Length (cm.):"))
        self.wm_length = wx.lib.masked.NumCtrl(self.wm_results_pane, wx.ID_ANY, _("0.00"), style=wx.TE_RIGHT)
        self.wm_w_label = wx.StaticText(self.wm_results_pane, wx.ID_ANY, _("Width (cm.):"))
        self.wm_width = wx.lib.masked.NumCtrl(self.wm_results_pane, wx.ID_ANY, _("0.00"), style=wx.TE_RIGHT)
        self.wm_d_label = wx.StaticText(self.wm_results_pane, wx.ID_ANY, _("Depth (cm.):"))
        self.wm_depth = wx.lib.masked.NumCtrl(self.wm_results_pane, wx.ID_ANY, _("0.00"), style=wx.TE_RIGHT)
        self.wm_lw_label = wx.StaticText(self.wm_results_pane, wx.ID_ANY, _("Length*Width (cm**2):"))
        self.wm_lw = wx.lib.masked.NumCtrl(self.wm_results_pane, wx.ID_ANY, _("0.00"), style=wx.TE_RIGHT)
        self.wm_a_label = wx.StaticText(self.wm_results_pane, wx.ID_ANY, _("Surface Area (cm**2):"))
        self.wm_area = wx.lib.masked.NumCtrl(self.wm_results_pane, wx.ID_ANY, _("0.00"), style=wx.TE_RIGHT)
        self.wm_v_label = wx.StaticText(self.wm_results_pane, wx.ID_ANY, _("Wound Volume (cm**3):"))
        self.wm_volume = wx.lib.masked.NumCtrl(self.wm_results_pane, wx.ID_ANY, _("0.00"), style=wx.TE_RIGHT)
        self.wm_push_label = wx.StaticText(self.wm_results_pane, wx.ID_ANY, _("PUSH Score:"))
        self.wm_push = wx.lib.masked.NumCtrl(self.wm_results_pane, wx.ID_ANY, _("0"), style=wx.TE_RIGHT)
        self.wm_historical_pane = wx.Panel(self.wound_measurement_notebook, wx.ID_ANY, style=wx.TAB_TRAVERSAL | wx.FULL_REPAINT_ON_RESIZE)
        self.wmh_patient_label = wx.StaticText(self.wm_historical_pane, wx.ID_ANY, _("Patient:"))
        self.wmh_patient_name = wx.TextCtrl(self.wm_historical_pane, wx.ID_ANY, _("None"), style=wx.TE_READONLY)
        self.wmh_patient_select_button = wx.Button(self.wm_historical_pane, wx.ID_ANY, _("Select"))
        self.wmh_wound_dropdown_label = wx.StaticText(self.wm_historical_pane, wx.ID_ANY, _("Wound Location:"))
        self.wmh_wound_loc = wx.ComboBox(self.wm_historical_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        self.wm_historical_label = wx.StaticText(self.wm_historical_pane, wx.ID_ANY, _("Historical Measurements"))
        self.wm_historical_list = ObjectListView(self.wm_historical_pane, wx.ID_ANY, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.analysis_segmentation_pane = wx.Panel(self.assessment_notebook, wx.ID_ANY)
        self.ts_2d_panel = wx.Panel(self.analysis_segmentation_pane, wx.ID_ANY)
        self.ts_2d_label = wx.StaticText(self.analysis_segmentation_pane, wx.ID_ANY, _("2-D Tissue Segmentation"))
        self.ts_3d_panel = wx.Panel(self.analysis_segmentation_pane, wx.ID_ANY)
        self.ts_3d_label = wx.StaticText(self.analysis_segmentation_pane, wx.ID_ANY, _("3-D Tissue Segmentation"), style=wx.ALIGN_CENTRE)
        self.tissue_segmentation_notebook = wx.Notebook(self.analysis_segmentation_pane, wx.ID_ANY, style=0)
        self.ts_config_pane = wx.Panel(self.tissue_segmentation_notebook, wx.ID_ANY)
        self.ts_results_pane = wx.Panel(self.tissue_segmentation_notebook, wx.ID_ANY)
        self.ts_patient_label = wx.StaticText(self.ts_results_pane, wx.ID_ANY, _("Patient:"))
        self.ts_patient_name = wx.TextCtrl(self.ts_results_pane, wx.ID_ANY, _("None"), style=wx.TE_READONLY)
        self.ts_patient_select_button = wx.Button(self.ts_results_pane, wx.ID_ANY, _("Select"))
        self.ts_wound_dropdown_label = wx.StaticText(self.ts_results_pane, wx.ID_ANY, _("Wound Location:"))
        self.ts_wound_loc = wx.ComboBox(self.ts_results_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        self.ts_assessement_dropdown_label = wx.StaticText(self.ts_results_pane, wx.ID_ANY, _("Assessment Number:"))
        self.ts_assessment_id = wx.ComboBox(self.ts_results_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.ts_results_label = wx.StaticText(self.ts_results_pane, wx.ID_ANY, _("Computed Results"))
        self.ts_granulation_label = wx.StaticText(self.ts_results_pane, wx.ID_ANY, _("Granulation (%):"))
        self.ts_granulation_percentage = wx.lib.masked.NumCtrl(self.ts_results_pane, wx.ID_ANY, _("0.0"), style=wx.TE_RIGHT)
        self.ts_slough_label = wx.StaticText(self.ts_results_pane, wx.ID_ANY, _("Slough (%):"))
        self.ts_slough_percentage = wx.lib.masked.NumCtrl(self.ts_results_pane, wx.ID_ANY, _("0.0"), style=wx.TE_RIGHT)
        self.ts_eschar_label = wx.StaticText(self.ts_results_pane, wx.ID_ANY, _("Eschar (%):"))
        self.ts_eschar_percentage = wx.lib.masked.NumCtrl(self.ts_results_pane, wx.ID_ANY, _("0.0"), style=wx.TE_RIGHT)
        self.ts_bone_label = wx.StaticText(self.ts_results_pane, wx.ID_ANY, _("Bone/Tendon (%):"))
        self.ts_bone_percentage = wx.lib.masked.NumCtrl(self.ts_results_pane, wx.ID_ANY, _("0.0"), style=wx.TE_RIGHT)
        self.ts_staging_label = wx.StaticText(self.ts_results_pane, wx.ID_ANY, _("Ulcer Staging (est.):"))
        self.ts_staging = wx.lib.masked.NumCtrl(self.ts_results_pane, wx.ID_ANY, _("0"), style=wx.TE_RIGHT)
        self.ts_historical_pane = wx.Panel(self.tissue_segmentation_notebook, wx.ID_ANY)
        self.tsh_patient_label = wx.StaticText(self.ts_historical_pane, wx.ID_ANY, _("Patient:"))
        self.tsh_patient_name = wx.TextCtrl(self.ts_historical_pane, wx.ID_ANY, _("None"), style=wx.TE_READONLY)
        self.tsh_patient_select_button = wx.Button(self.ts_historical_pane, wx.ID_ANY, _("Select"))
        self.tsh_wound_dropdown_label = wx.StaticText(self.ts_historical_pane, wx.ID_ANY, _("Wound Location:"))
        self.tsh_wound_loc = wx.ComboBox(self.ts_historical_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        self.ts_historical_label = wx.StaticText(self.ts_historical_pane, wx.ID_ANY, _("Historical Measurements"))
        self.ts_historical_list = ObjectListView(self.ts_historical_pane, wx.ID_ANY, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.analysis_thermal_pane = wx.Panel(self.assessment_notebook, wx.ID_ANY)
        self.thermal_2d_pane = wx.Panel(self.analysis_thermal_pane, wx.ID_ANY)
        self.th_2d_label = wx.StaticText(self.analysis_thermal_pane, wx.ID_ANY, _("Thermal 2-D Hot Spot Map"))
        self.thermal_3d_panel = wx.Panel(self.analysis_thermal_pane, wx.ID_ANY)
        self.th_3d_label = wx.StaticText(self.analysis_thermal_pane, wx.ID_ANY, _("Thermal 3-D Hot Spot Map"))
        self.thermal_cont_radio = wx.RadioButton(self.analysis_thermal_pane, wx.ID_ANY, _("Continuous Temperature"), style=wx.RB_GROUP)
        self.thermal_segmented_radio = wx.RadioButton(self.analysis_thermal_pane, wx.ID_ANY, _("Segmented Temperature"), style=wx.RB_GROUP)
        self.thermal_segment_size = wx.ComboBox(self.analysis_thermal_pane, wx.ID_ANY, choices=[_("0.25 C"), _("0.50 C"), _("0.75 C"), _("1.00 C"), _("1.25 C"), _("1.50 C"), _("1.75 C"), _("2.00 C")], style=wx.CB_DROPDOWN)
        self.thermal_profile_notebook = wx.Notebook(self.analysis_thermal_pane, wx.ID_ANY, style=0)
        self.th_config_pane = wx.Panel(self.thermal_profile_notebook, wx.ID_ANY)
        self.th_results_pane = wx.Panel(self.thermal_profile_notebook, wx.ID_ANY)
        self.th_patient_label = wx.StaticText(self.th_results_pane, wx.ID_ANY, _("Patient:"))
        self.th_patient_name = wx.TextCtrl(self.th_results_pane, wx.ID_ANY, _("None"), style=wx.TE_READONLY)
        self.th_patient_select_button = wx.Button(self.th_results_pane, wx.ID_ANY, _("Select"))
        self.th_wound_dropdown_label = wx.StaticText(self.th_results_pane, wx.ID_ANY, _("Wound Location:"))
        self.th_wound_loc = wx.ComboBox(self.th_results_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        self.th_assessement_dropdown_label = wx.StaticText(self.th_results_pane, wx.ID_ANY, _("Assessment Number:"))
        self.th_assessment_id = wx.ComboBox(self.th_results_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.th_results_label = wx.StaticText(self.th_results_pane, wx.ID_ANY, _("Thermal Profile"))
        self.t_max_label = wx.StaticText(self.th_results_pane, wx.ID_ANY, _("Maximum Temperature (C):"))
        self.t_max = wx.lib.masked.NumCtrl(self.th_results_pane, wx.ID_ANY, _("0.0"), style=wx.TE_RIGHT)
        self.t_min_label = wx.StaticText(self.th_results_pane, wx.ID_ANY, _("Minimum Temperature (C):"))
        self.t_min = wx.lib.masked.NumCtrl(self.th_results_pane, wx.ID_ANY, _("0.0"), style=wx.TE_RIGHT)
        self.t_base_label = wx.StaticText(self.th_results_pane, wx.ID_ANY, _("Baseline Temperature (C):"))
        self.t_baseline = wx.lib.masked.NumCtrl(self.th_results_pane, wx.ID_ANY, _("0.0"), style=wx.TE_RIGHT)
        self.t_sigma_label = wx.StaticText(self.th_results_pane, wx.ID_ANY, _("Temperature Variation Sigma:"))
        self.t_sigma = wx.lib.masked.NumCtrl(self.th_results_pane, wx.ID_ANY, _("0.000"), style=wx.TE_RIGHT)
        self.t_s1_label = wx.StaticText(self.th_results_pane, wx.ID_ANY, _("Temperature Segment #1 (%):"))
        self.t_segment_1 = wx.lib.masked.NumCtrl(self.th_results_pane, wx.ID_ANY, _("0.0"), style=wx.TE_RIGHT)
        self.t_s2_label = wx.StaticText(self.th_results_pane, wx.ID_ANY, _("Temperature Segment #2 (%):"))
        self.t_segment_2 = wx.lib.masked.NumCtrl(self.th_results_pane, wx.ID_ANY, _("0.0"), style=wx.TE_RIGHT)
        self.t_s3_label = wx.StaticText(self.th_results_pane, wx.ID_ANY, _("Temperature Segment #3 (%):"))
        self.t_segment_3 = wx.lib.masked.NumCtrl(self.th_results_pane, wx.ID_ANY, _("0.0"), style=wx.TE_RIGHT)
        self.t_s4_label = wx.StaticText(self.th_results_pane, wx.ID_ANY, _("Temperature Segment #4 (%):"))
        self.t_segment_4 = wx.lib.masked.NumCtrl(self.th_results_pane, wx.ID_ANY, _("0.0"), style=wx.TE_RIGHT)
        self.t_s5_label = wx.StaticText(self.th_results_pane, wx.ID_ANY, _("Temperature Segment #5 (%):"))
        self.t_segment_5 = wx.lib.masked.NumCtrl(self.th_results_pane, wx.ID_ANY, _("0.0"), style=wx.TE_RIGHT)
        self.th_historical_pane = wx.Panel(self.thermal_profile_notebook, wx.ID_ANY)
        self.thh_patient_label = wx.StaticText(self.th_historical_pane, wx.ID_ANY, _("Patient:"))
        self.thh_patient_name = wx.TextCtrl(self.th_historical_pane, wx.ID_ANY, _("None"), style=wx.TE_READONLY)
        self.thh_patient_select_button = wx.Button(self.th_historical_pane, wx.ID_ANY, _("Select"))
        self.thh_wound_dropdown_label = wx.StaticText(self.th_historical_pane, wx.ID_ANY, _("Wound Location:"))
        self.thh_wound_loc = wx.ComboBox(self.th_historical_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        self.th_historical_label = wx.StaticText(self.th_historical_pane, wx.ID_ANY, _("Historical Measurements"))
        self.th_historical_list = ObjectListView(self.th_historical_pane, wx.ID_ANY, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.analysis_chemical_pane = wx.Panel(self.assessment_notebook, wx.ID_ANY)
        self.chemical_panel = wx.Panel(self.analysis_chemical_pane, wx.ID_ANY)
        self.cs_panel_label = wx.StaticText(self.analysis_chemical_pane, wx.ID_ANY, _("Frequency / Impedance Curve"))
        self.chemical_sensing_notebook = wx.Notebook(self.analysis_chemical_pane, wx.ID_ANY, style=0)
        self.cs_config_pane = wx.Panel(self.chemical_sensing_notebook, wx.ID_ANY)
        self.cs_results_pane = wx.Panel(self.chemical_sensing_notebook, wx.ID_ANY)
        self.cs_patient_label = wx.StaticText(self.cs_results_pane, wx.ID_ANY, _("Patient:"))
        self.cs_patient_name = wx.TextCtrl(self.cs_results_pane, wx.ID_ANY, _("None"), style=wx.TE_READONLY)
        self.cs_patient_select_button = wx.Button(self.cs_results_pane, wx.ID_ANY, _("Select"))
        self.cs_wound_dropdown_label = wx.StaticText(self.cs_results_pane, wx.ID_ANY, _("Wound Location:"))
        self.cs_wound_loc = wx.ComboBox(self.cs_results_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        self.cs_assessement_dropdown_label = wx.StaticText(self.cs_results_pane, wx.ID_ANY, _("Assessment Number:"))
        self.cs_assessment_id = wx.ComboBox(self.cs_results_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.cs_results_label = wx.StaticText(self.cs_results_pane, wx.ID_ANY, _("Chemical Sensing Results"))
        self.cs_historical_pane = wx.Panel(self.chemical_sensing_notebook, wx.ID_ANY)
        self.csh_patient_label = wx.StaticText(self.cs_historical_pane, wx.ID_ANY, _("Patient:"))
        self.csh_patient_name = wx.TextCtrl(self.cs_historical_pane, wx.ID_ANY, _("None"), style=wx.TE_READONLY)
        self.csh_patient_select_button = wx.Button(self.cs_historical_pane, wx.ID_ANY, _("Select"))
        self.csh_wound_dropdown_label = wx.StaticText(self.cs_historical_pane, wx.ID_ANY, _("Wound Location:"))
        self.csh_wound_loc = wx.ComboBox(self.cs_historical_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        self.cs_historical_label = wx.StaticText(self.cs_historical_pane, wx.ID_ANY, _("Historical Measurements"))
        self.cs_historical_list = ObjectListView(self.cs_historical_pane, wx.ID_ANY)
        self.clinical_collection_pane = wx.lib.scrolledpanel.ScrolledPanel(self.assessment_notebook, wx.ID_ANY)
        self.cc_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Clinical Assessment Reporting"), style=wx.ALIGN_CENTRE)
        self.cc_patient_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Patient:"))
        self.cc_patient_name = wx.TextCtrl(self.clinical_collection_pane, wx.ID_ANY, "")
        self.patient_select_button = wx.Button(self.clinical_collection_pane, wx.ID_ANY, _("Select"))
        self.cc_wound_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Wound:"))
        self.cc_wound_loc = wx.ComboBox(self.clinical_collection_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.cc_wound_button = wx.Button(self.clinical_collection_pane, wx.ID_ANY, _("New"))
        self.assessment_no_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Assessment Number:"))
        self.cc_assessment_no = wx.ComboBox(self.clinical_collection_pane, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.cc_assessment_button = wx.Button(self.clinical_collection_pane, wx.ID_ANY, _("New"))
        self.cc_datetime_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Assessment Date & Time:"))
        self.cc_datepicker = wx.DatePickerCtrl(self.clinical_collection_pane, wx.ID_ANY, style=wx.DP_DROPDOWN)
        self.cc_timepicker = wx.lib.masked.timectrl.TimeCtrl(self.clinical_collection_pane, wx.ID_ANY)
        self.cc_length_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Wound Length (cm.):"))
        self.cc_length = wx.lib.masked.NumCtrl(self.clinical_collection_pane, wx.ID_ANY, _("0.00"), style=wx.TE_RIGHT)
        self.cc_width_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Wound Width (cm.):"))
        self.cc_width = wx.lib.masked.NumCtrl(self.clinical_collection_pane, wx.ID_ANY, _("0.00"), style=wx.TE_RIGHT)
        self.cc_depth_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Wound Depth (cm.):"))
        self.cc_depth = wx.lib.masked.NumCtrl(self.clinical_collection_pane, wx.ID_ANY, _("0.00"), style=wx.TE_RIGHT)
        self.cc_u_depth_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Undermining Depth (cm.):"))
        self.cc_u_depth = wx.lib.masked.NumCtrl(self.clinical_collection_pane, wx.ID_ANY, _("0.00"), style=wx.TE_RIGHT)
        self.cc_u_desc_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Undermining Description:"))
        self.cc_u_desc = wx.TextCtrl(self.clinical_collection_pane, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.cc_staging_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Ulcer Staging:"))
        self.cc_staging = wx.ComboBox(self.clinical_collection_pane, wx.ID_ANY, choices=[_("1"), _("2"), _("3"), _("4")], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        self.cc_bed_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Bed Color:"))
        self.cc_bed_color = wx.TextCtrl(self.clinical_collection_pane, wx.ID_ANY, "")
        self.cc_ex_amt_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Extudate Amount:"))
        self.cc_ex_amt = wx.ComboBox(self.clinical_collection_pane, wx.ID_ANY, choices=[_("None"), _("Scant"), _("Small"), _("Moderate"), _("Large")], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        self.cc_ex_type_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Extudate Type:"))
        self.cc_ex_type = wx.ComboBox(self.clinical_collection_pane, wx.ID_ANY, choices=[_("None"), _("Bloody"), _("Serosanguineous"), _("Serous"), _("Purulent")], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        self.cc_granulation_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Granulation Percentage:"))
        self.cc_granulation_percentage = wx.lib.masked.NumCtrl(self.clinical_collection_pane, wx.ID_ANY, _("0"), style=wx.TE_RIGHT)
        self.cc_slough_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Slough Percentage:"))
        self.cc_slough_percentage = wx.lib.masked.NumCtrl(self.clinical_collection_pane, wx.ID_ANY, _("0"), style=wx.TE_RIGHT)
        self.cc_eschar_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Eschar Percentage:"))
        self.cc_eschar_percentage = wx.lib.masked.NumCtrl(self.clinical_collection_pane, wx.ID_ANY, _("0"), style=wx.TE_RIGHT)
        self.cc_bone_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Bone / Tendon Percentage:"))
        self.cc_bone_percentage = wx.lib.masked.NumCtrl(self.clinical_collection_pane, wx.ID_ANY, _("0"), style=wx.TE_RIGHT)
        self.cc_peri_desc_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Peri-Ulcer Area Description:"))
        self.cc_peri_desc = wx.TextCtrl(self.clinical_collection_pane, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.cc_blanching_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Blanching Exists?"))
        self.cc_blanching_exists = wx.CheckBox(self.clinical_collection_pane, wx.ID_ANY, "")
        self.cc_infection_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Infection Notes:"))
        self.cc_infection = wx.TextCtrl(self.clinical_collection_pane, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.cc_odor_intensity_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Odor Intensity:"))
        self.cc_odor_intensity = wx.ComboBox(self.clinical_collection_pane, wx.ID_ANY, choices=[_("No odor"), _("Slight"), _("Moderate"), _("Strong")], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        self.cc_odor_description_label = wx.StaticText(self.clinical_collection_pane, wx.ID_ANY, _("Odor Description:"))
        self.cc_odor_description = wx.TextCtrl(self.clinical_collection_pane, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.cc_save_button = wx.Button(self.clinical_collection_pane, wx.ID_SAVE, "")
        self.cc_reset_button = wx.Button(self.clinical_collection_pane, wx.ID_ANY, _("Reset"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.OnCloseWindow, self.exitFileMenuItem)
        self.Bind(wx.EVT_MENU, self.DoWoundList, self.newWoundMenuItem)
        self.Bind(wx.EVT_MENU, self.DoAssessmentList, self.newAssessmentMenuItem)
        self.Bind(wx.EVT_MENU, self.DoAlgorithmList, self.newAlgorithmItem)
        self.Bind(wx.EVT_MENU, self.DoExperimentList, self.newExperimentItem)
        self.Bind(wx.EVT_MENU, self.DoChangePassword, self.changePasswordItem)
        self.Bind(wx.EVT_MENU, self.DoConfigList, self.newSystemConfiguration)
        self.Bind(wx.EVT_BUTTON, self.DoSelectPatient, self.ch_patient_select_button)
        self.Bind(wx.EVT_COMBOBOX, self.DoWoundSelect, self.ch_wound_loc)
        self.Bind(wx.EVT_BUTTON, self.DoNewWound, self.ch_wound_new_button)
        self.Bind(wx.EVT_COMBOBOX, self.DoSelectAssessment, self.ch_assessment_id)
        self.Bind(wx.EVT_BUTTON, self.DoNewAssessment, self.ch_assessment_new_button)
        self.Bind(wx.EVT_BUTTON, self.OnStartChemBaseline, self.baseline_start_stop_button)
        self.Bind(wx.EVT_BUTTON, self.OnResetChemBaseline, self.baseline_reset_button)
        self.Bind(wx.EVT_BUTTON, self.OnStartChemWound, self.wound_start_stop_button)
        self.Bind(wx.EVT_BUTTON, self.OnResetChemWound, self.wound_reset_button)
        self.Bind(wx.EVT_BUTTON, self.DoSelectPatient, self.cv_patient_select_button)
        self.Bind(wx.EVT_COMBOBOX, self.DoWoundSelect, self.wound_loc)
        self.Bind(wx.EVT_BUTTON, self.DoNewWound, self.cv_wound_new_button)
        self.Bind(wx.EVT_COMBOBOX, self.DoSelectAssessment, self.cv_assessment_id)
        self.Bind(wx.EVT_BUTTON, self.DoNewAssessment, self.cv_assessment_new_button)
        self.Bind(wx.EVT_BUTTON, self.OnRecordClick, self.start_stop_button)
        self.Bind(wx.EVT_BUTTON, self.DoVisualReset, self.cv_reset_button)
        self.Bind(wx.EVT_BUTTON, self.OnPreviewClick, self.preview_button)
        self.Bind(wx.EVT_BUTTON, self.OnSelectSnapshot, id=801)
        self.Bind(wx.EVT_BUTTON, self.OnSelectSnapshot, id=803)
        self.Bind(wx.EVT_BUTTON, self.OnSelectSnapshot, id=804)
        self.Bind(wx.EVT_BUTTON, self.OnSelectSnapshot, id=805)
        self.Bind(wx.EVT_BUTTON, self.OnSelectSnapshot, id=807)
        self.Bind(wx.EVT_BUTTON, self.DoSelectPatient, self.ms_patient_select_button)
        self.Bind(wx.EVT_COMBOBOX, self.DoWoundSelect, self.ms_wound_loc)
        self.Bind(wx.EVT_BUTTON, self.DoNewWound, self.ms_wound_new_button)
        self.Bind(wx.EVT_COMBOBOX, self.DoSelectAssessment, self.ms_assessment_id)
        self.Bind(wx.EVT_BUTTON, self.DoNewAssessment, self.ms_assessment_new_button)
        self.Bind(wx.EVT_BUTTON, self.OnMSSnapshotClick, self.ms_snapshot_button)
        self.Bind(wx.EVT_BUTTON, self.OnMSResetClick, self.ms_reset_button)
        self.Bind(wx.EVT_BUTTON, self.OnMSPreviewClick, self.ms_preview_button)
        self.Bind(wx.EVT_BUTTON, self.DoSelectPatient, self.wm_patient_select_button)
        self.Bind(wx.EVT_COMBOBOX, self.DoWoundSelect, self.wm_wound_loc)
        self.Bind(wx.EVT_COMBOBOX, self.DoSelectAssessment, self.wm_assessment_id)
        self.Bind(wx.EVT_BUTTON, self.DoSelectPatient, self.wmh_patient_select_button)
        self.Bind(wx.EVT_COMBOBOX, self.DoWoundSelect, self.wmh_wound_loc)
        self.Bind(wx.EVT_BUTTON, self.DoSelectPatient, self.ts_patient_select_button)
        self.Bind(wx.EVT_COMBOBOX, self.DoWoundSelect, self.ts_wound_loc)
        self.Bind(wx.EVT_COMBOBOX, self.DoSelectAssessment, self.ts_assessment_id)
        self.Bind(wx.EVT_BUTTON, self.DoSelectPatient, self.tsh_patient_select_button)
        self.Bind(wx.EVT_COMBOBOX, self.DoWoundSelect, self.tsh_wound_loc)
        self.Bind(wx.EVT_BUTTON, self.DoSelectPatient, self.th_patient_select_button)
        self.Bind(wx.EVT_COMBOBOX, self.DoWoundSelect, self.th_wound_loc)
        self.Bind(wx.EVT_COMBOBOX, self.DoSelectAssessment, self.th_assessment_id)
        self.Bind(wx.EVT_BUTTON, self.DoSelectPatient, self.thh_patient_select_button)
        self.Bind(wx.EVT_COMBOBOX, self.DoWoundSelect, self.thh_wound_loc)
        self.Bind(wx.EVT_BUTTON, self.DoSelectPatient, self.cs_patient_select_button)
        self.Bind(wx.EVT_COMBOBOX, self.DoWoundSelect, self.cs_wound_loc)
        self.Bind(wx.EVT_COMBOBOX, self.DoSelectAssessment, self.cs_assessment_id)
        self.Bind(wx.EVT_BUTTON, self.DoSelectPatient, self.csh_patient_select_button)
        self.Bind(wx.EVT_COMBOBOX, self.DoWoundSelect, self.csh_wound_loc)
        self.Bind(wx.EVT_BUTTON, self.DoSelectPatient, self.patient_select_button)
        self.Bind(wx.EVT_COMBOBOX, self.DoWoundSelect, self.cc_wound_loc)
        self.Bind(wx.EVT_BUTTON, self.DoNewWound, self.cc_wound_button)
        self.Bind(wx.EVT_COMBOBOX, self.DoSelectAssessment, self.cc_assessment_no)
        self.Bind(wx.EVT_BUTTON, self.DoNewAssessment, self.cc_assessment_button)
        self.Bind(wx.EVT_BUTTON, self.OnClinicalSave, self.cc_save_button)
        self.Bind(wx.EVT_BUTTON, self.OnClinicalReset, self.cc_reset_button)
        # end wxGlade
        self.recordingExists = False
        self.recordOn = False
        self.playbackOn = False
        self.previewOn = False
        self.previewPaused = False
        self.currentPatient = None
        self.patient_id = -1
        self.woundId = -1
        self.assessmentId = -1
        self.start_stop_button.Disable()
        self.cv_reset_button.Disable()
        self.Bind(wx.EVT_CLOSE, self.OnCloseWindow)
        self.Bind(wx.EVT_MENU, self.DoNewPatient, self.newPatientMenuItem)
        self.Bind(wx.EVT_MENU, self.DoSelectPatient, self.selectPatientMenuItem)
        self.ch_wound_msg.SetValue('No assessment selected')
        self.ch_baseline_msg.SetValue('No assessment selected')
        self.activeVisualBtn = -1
        self.VisualControl("")
        self.clinical_collection_pane.SetAutoLayout(True)
        self.clinical_collection_pane.SetupScrolling()
        # set up biochemical plot panel
        self.chem_figure = Figure(figsize=(7.92,7.92))
        self.chem_axes = self.chem_figure.add_subplot(111)
        self.chem_axes.set_xlabel('Frequency')
        self.chem_axes.set_ylabel('Impedance')
        self.chem_canvas = FigureCanvas(self.chem_plot_panel, wx.ID_ANY, self.chem_figure)
        chem_panel_sizer = wx.BoxSizer(wx.VERTICAL)
        chem_panel_sizer.Add(self.chem_canvas, 1, wx.EXPAND)
        self.chem_plot_panel.SetSizer(chem_panel_sizer)
        self.chem_plot_panel.Fit()
        # Hide analysis tabs
        #self.assessment_notebook.EnableTab(3, False)
        #self.assessment_notebook.EnableTab(4, False)
        #self.assessment_notebook.EnableTab(5, False)
        #self.assessment_notebook.EnableTab(6, False)


    def __set_properties(self):
        """
        Sets various properties of the widgets
        """
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle(_("Multi-Modality Portable System for Pressure Ulcer Prevention - Assessment"))
        self.main_frame_statusbar.SetStatusWidths([-1])
        # statusbar fields
        main_frame_statusbar_fields = [_("frame_1_statusbar")]
        for i in range(len(main_frame_statusbar_fields)):
            self.main_frame_statusbar.SetStatusText(main_frame_statusbar_fields[i], i)
        self.chem_plot_panel.SetMinSize((640, 640))
        self.ch_sampling_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.ch_patient_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ch_patient_name.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ch_patient_name.Enable(False)
        self.ch_patient_select_button.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ch_wound_dropdown_label_copy.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ch_wound_loc.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ch_wound_new_button.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ch_assessement_dropdown_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ch_assessment_id.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ch_assessment_new_button.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.baseline_label.SetMinSize((149, 19))
        self.baseline_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.ch_baseline_msg.SetMinSize((600, 27))
        self.ch_baseline_msg.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.chemical_wound_label.SetMinSize((136, 19))
        self.chemical_wound_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.ch_wound_msg.SetMinSize((600, 27))
        self.ch_wound_msg.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.rgb_video_panel.SetMinSize((640, 360))
        self.rgb_video_panel_label.SetMinSize((640, 20))
        self.rgb_video_panel_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.depth_video_panel.SetMinSize((320, 240))
        self.thermal_video_panel.SetMinSize((320, 240))
        self.visual_depth_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.visual_thermal_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.cv_patient_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.patient_name.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.patient_name.Enable(False)
        self.cv_patient_select_button.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cv_wound_dropdown_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wound_loc.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cv_wound_new_button.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cv_assessement_dropdown_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cv_assessment_id.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cv_assessment_new_button.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.start_stop_button.SetMinSize((75, 29))
        self.start_stop_button.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cv_reset_button.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.preview_button.SetMinSize((75, 29))
        self.preview_button.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.visual_msg.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cv_grid_mc.SetMinSize((75, 37))
        self.visual_collection_pane.SetFocus()
        self.rgb_video_panel_copy.SetMinSize((640, 360))
        self.rgb_video_panel_label_copy.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.multi_video_panel.SetMinSize((256, 256))
        self.multi_video_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.ms_patient_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ms_patient_name.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ms_patient_name.Enable(False)
        self.ms_patient_select_button.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ms_wound_dropdown_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ms_wound_loc.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ms_wound_new_button.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ms_assessement_dropdown_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ms_assessment_id.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ms_assessment_new_button.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ms_snapshot_button.SetMinSize((75, 29))
        self.ms_snapshot_button.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ms_reset_button.SetMinSize((75, 29))
        self.ms_reset_button.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ms_preview_button.SetMinSize((75, 29))
        self.ms_preview_button.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ms_msg.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_3d_panel.SetMinSize((640,480))
        self.wm3d_label.SetMinSize((175, 20))
        self.wm3d_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.wm_rgb_radio_btn.SetMinSize((166, 39))
        self.wm_patient_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_patient_name.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_patient_name.Enable(False)
        self.wm_patient_select_button.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_wound_dropdown_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_wound_loc.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_assessement_dropdown_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_assessment_id.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_reslts_label.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.wm_l_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_length.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_length.SetAllowNegative(False)
        self.wm_length.SetFractionWidth(2)
        self.wm_length.SetMin(0.00)
        self.wm_w_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_width.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_width.SetAllowNegative(False)
        self.wm_width.SetFractionWidth(2)
        self.wm_width.SetMin(0.00)
        self.wm_d_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_depth.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_depth.SetAllowNegative(False)
        self.wm_depth.SetFractionWidth(2)
        self.wm_depth.SetMin(0.00)
        self.wm_lw_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_lw.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_lw.SetAllowNegative(False)
        self.wm_lw.SetFractionWidth(2)
        self.wm_lw.SetMin(0.00)
        self.wm_a_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_area.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_area.SetAllowNegative(False)
        self.wm_area.SetFractionWidth(2)
        self.wm_area.SetMin(0.00)
        self.wm_v_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_volume.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_volume.SetAllowNegative(False)
        self.wm_volume.SetFractionWidth(2)
        self.wm_volume.SetMin(0.00)
        self.wm_push_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_push.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_push.SetAllowNegative(False)
        self.wm_push.SetFractionWidth(0)
        self.wm_push.SetMin(0)
        self.wmh_patient_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wmh_patient_name.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wmh_patient_name.Enable(False)
        self.wmh_patient_select_button.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wmh_wound_dropdown_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wmh_wound_loc.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wm_historical_label.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.ts_2d_panel.SetMinSize((480, 360))
        self.ts_2d_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.ts_3d_panel.SetMinSize((480,360))
        self.ts_3d_label.SetMinSize((161, 16))
        self.ts_3d_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.ts_patient_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ts_patient_name.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ts_patient_name.Enable(False)
        self.ts_patient_select_button.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ts_wound_dropdown_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ts_wound_loc.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ts_assessement_dropdown_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ts_assessment_id.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ts_results_label.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.ts_granulation_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ts_granulation_percentage.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ts_granulation_percentage.SetAllowNegative(False)
        self.ts_granulation_percentage.SetFractionWidth(1)
        self.ts_granulation_percentage.SetMin(0)
        self.ts_slough_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ts_slough_percentage.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ts_slough_percentage.SetAllowNegative(False)
        self.ts_slough_percentage.SetFractionWidth(1)
        self.ts_slough_percentage.SetMin(0)
        self.ts_eschar_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ts_eschar_percentage.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ts_eschar_percentage.SetAllowNegative(False)
        self.ts_eschar_percentage.SetFractionWidth(1)
        self.ts_eschar_percentage.SetMin(0)
        self.ts_bone_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ts_bone_percentage.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ts_bone_percentage.SetAllowNegative(False)
        self.ts_bone_percentage.SetFractionWidth(1)
        self.ts_bone_percentage.SetMin(0)
        self.ts_staging_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ts_staging.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ts_staging.SetAllowNegative(False)
        self.ts_staging.SetFractionWidth(0)
        self.ts_staging.SetMin(0)
        self.tsh_patient_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.tsh_patient_name.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.tsh_patient_name.Enable(False)
        self.tsh_patient_select_button.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.tsh_wound_dropdown_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.tsh_wound_loc.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ts_historical_label.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.thermal_2d_pane.SetMinSize((384,288))
        self.th_2d_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.thermal_3d_panel.SetMinSize((384,288))
        self.th_3d_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.thermal_cont_radio.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.thermal_segmented_radio.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.thermal_segment_size.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.thermal_segment_size.SetSelection(1)
        self.th_patient_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.th_patient_name.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.th_patient_name.Enable(False)
        self.th_patient_select_button.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.th_wound_dropdown_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.th_wound_loc.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.th_assessement_dropdown_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.th_assessment_id.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.th_results_label.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.t_max_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.t_max.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.t_max.SetAllowNegative(False)
        self.t_max.SetFractionWidth(1)
        self.t_max.SetMin(0.0)
        self.t_min_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.t_min.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.t_min.SetAllowNegative(False)
        self.t_min.SetFractionWidth(1)
        self.t_min.SetMin(0.0)
        self.t_base_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.t_baseline.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.t_baseline.SetAllowNegative(False)
        self.t_baseline.SetFractionWidth(1)
        self.t_baseline.SetMin(0.0)
        self.t_sigma_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.t_sigma.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.t_sigma.SetAllowNegative(False)
        self.t_sigma.SetFractionWidth(3)
        self.t_sigma.SetMin(0.00)
        self.t_s1_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.t_segment_1.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.t_segment_1.SetAllowNegative(False)
        self.t_segment_1.SetFractionWidth(1)
        self.t_segment_1.SetMin(0.0)
        self.t_s2_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.t_segment_2.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.t_segment_2.SetAllowNegative(False)
        self.t_segment_2.SetFractionWidth(1)
        self.t_segment_2.SetMin(0.0)
        self.t_s3_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.t_segment_3.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.t_segment_3.SetAllowNegative(False)
        self.t_segment_3.SetFractionWidth(1)
        self.t_segment_3.SetMin(0.0)
        self.t_s4_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.t_segment_4.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.t_segment_4.SetAllowNegative(False)
        self.t_segment_4.SetFractionWidth(1)
        self.t_segment_4.SetMin(0.0)
        self.t_s5_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.t_segment_5.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.t_segment_5.SetAllowNegative(False)
        self.t_segment_5.SetFractionWidth(1)
        self.t_segment_5.SetMin(0.0)
        self.thh_patient_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.thh_patient_name.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.thh_patient_name.Enable(False)
        self.thh_patient_select_button.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.thh_wound_dropdown_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.thh_wound_loc.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.th_historical_label.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.chemical_panel.SetMinSize((640, 480))
        self.cs_panel_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.cs_patient_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cs_patient_name.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cs_patient_name.Enable(False)
        self.cs_patient_select_button.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cs_wound_dropdown_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cs_wound_loc.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cs_assessement_dropdown_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cs_assessment_id.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cs_results_label.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.csh_patient_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.csh_patient_name.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.csh_patient_name.Enable(False)
        self.csh_patient_select_button.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.csh_wound_dropdown_label.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.csh_wound_loc.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cs_historical_label.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.cc_label.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.cc_patient_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_patient_name.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_patient_name.Enable(False)
        self.patient_select_button.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_wound_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_wound_loc.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_wound_button.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.assessment_no_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_assessment_no.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_assessment_button.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_datetime_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_datepicker.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_timepicker.SetMinSize((92, 29))
        self.cc_timepicker.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_length_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_length.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_length.SetAllowNegative(False)
        self.cc_length.SetFractionWidth(2)
        self.cc_length.SetMin(0.00)
        self.cc_width_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_width.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_width.SetAllowNegative(False)
        self.cc_width.SetFractionWidth(2)
        self.cc_width.SetMin(0.00)
        self.cc_depth_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_depth.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_depth.SetAllowNegative(False)
        self.cc_depth.SetFractionWidth(2)
        self.cc_depth.SetMin(0.00)
        self.cc_u_depth_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_u_depth.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_u_depth.SetAllowNegative(False)
        self.cc_u_depth.SetFractionWidth(2)
        self.cc_u_depth.SetMin(0.00)
        self.cc_u_desc_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_u_desc.SetMinSize((300, 34))
        self.cc_u_desc.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_staging_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_staging.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_staging.SetSelection(0)
        self.cc_bed_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_bed_color.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_ex_amt_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_ex_amt.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_ex_amt.SetSelection(0)
        self.cc_ex_type_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_ex_type.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_ex_type.SetSelection(-1)
        self.cc_granulation_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_granulation_percentage.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_granulation_percentage.SetAllowNegative(False)
        self.cc_granulation_percentage.SetMin(0)
        self.cc_slough_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_slough_percentage.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_slough_percentage.SetAllowNegative(False)
        self.cc_slough_percentage.SetMin(0)
        self.cc_eschar_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_eschar_percentage.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_eschar_percentage.SetAllowNegative(False)
        self.cc_eschar_percentage.SetMin(0)
        self.cc_bone_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_bone_percentage.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_bone_percentage.SetAllowNegative(False)
        self.cc_bone_percentage.SetMin(0)
        self.cc_peri_desc_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_peri_desc.SetMinSize((300, 34))
        self.cc_peri_desc.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_blanching_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_blanching_exists.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_infection_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_infection.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_odor_intensity_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_odor_intensity.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_odor_intensity.SetSelection(-1)
        self.cc_odor_description_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_odor_description.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_save_button.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cc_reset_button.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.assessment_notebook.SetAGWWindowStyleFlag(aui.AUI_NB_TOP)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        clinical_sizer = wx.BoxSizer(wx.VERTICAL)
        clinical_button_sizer = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_2 = wx.FlexGridSizer(22, 3, 6, 12)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        cs_sizer = wx.BoxSizer(wx.HORIZONTAL)
        cs_historical_top_sizer = wx.BoxSizer(wx.VERTICAL)
        csh_pwa_grid_sizer = wx.FlexGridSizer(3, 3, 5, 4)
        cs_results_top_sizer = wx.BoxSizer(wx.VERTICAL)
        cs_pwa_grid_sizer = wx.FlexGridSizer(3, 3, 5, 4)
        cs_sizer_l_v = wx.BoxSizer(wx.VERTICAL)
        th_sizer = wx.BoxSizer(wx.HORIZONTAL)
        th_historical_top_sizer = wx.BoxSizer(wx.VERTICAL)
        thh_pwa_grid_sizer = wx.FlexGridSizer(3, 3, 5, 4)
        th_results_top_sizer = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(9, 2, 16, 30)
        th_pwa_grid_sizer = wx.FlexGridSizer(3, 3, 5, 4)
        th_sizer_l_v = wx.BoxSizer(wx.VERTICAL)
        ts_button_grid_sizer = wx.FlexGridSizer(2, 2, 0, 0)
        ts_sizer = wx.BoxSizer(wx.HORIZONTAL)
        ts_historical_top_sizer = wx.BoxSizer(wx.VERTICAL)
        tsh_pwa_grid_sizer = wx.FlexGridSizer(3, 3, 5, 4)
        ts_results_top_sizer = wx.BoxSizer(wx.VERTICAL)
        ts_results_grid_sizer = wx.GridSizer(5, 2, 16, 30)
        ts_pwa_grid_sizer = wx.FlexGridSizer(3, 3, 5, 4)
        ts_sizer_l_v = wx.BoxSizer(wx.VERTICAL)
        wm_sizer = wx.BoxSizer(wx.HORIZONTAL)
        wm_historical_top_sizer = wx.BoxSizer(wx.VERTICAL)
        wmh_pwa_grid_sizer = wx.FlexGridSizer(3, 3, 5, 4)
        wm_results_top_sizer = wx.BoxSizer(wx.VERTICAL)
        wm_results_grid_sizer = wx.GridSizer(7, 2, 16, 30)
        wm_pwa_grid_sizer = wx.FlexGridSizer(3, 3, 5, 4)
        wm_sizer_l_v = wx.BoxSizer(wx.VERTICAL)
        wm_sizer_lbh = wx.BoxSizer(wx.HORIZONTAL)
        wm_sizer_lbmv = wx.BoxSizer(wx.VERTICAL)
        ms_collection_sizer = wx.BoxSizer(wx.HORIZONTAL)
        ms_r_sizer = wx.BoxSizer(wx.VERTICAL)
        ms_grid_sizer = wx.FlexGridSizer(6, 3, 8, 20)
        ms_l_sizer = wx.BoxSizer(wx.VERTICAL)
        ms_lower_video_sizer = wx.FlexGridSizer(3, 3, 0, 0)
        sizer_7_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6_copy = wx.BoxSizer(wx.HORIZONTAL)
        collection_sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        cv_r_sizer = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_3 = wx.GridSizer(3, 3, 10, 10)
        cv_grid_sizer = wx.FlexGridSizer(6, 3, 8, 20)
        cv_l_sizer = wx.BoxSizer(wx.VERTICAL)
        lower_video_sizer = wx.FlexGridSizer(2, 5, 0, 0)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        chemical_collection_sizer_h = wx.BoxSizer(wx.HORIZONTAL)
        chemical_collection_sizer_vr = wx.BoxSizer(wx.VERTICAL)
        ch_grid_sizer = wx.FlexGridSizer(8, 3, 8, 20)
        chemical_collection_sizer_vl = wx.BoxSizer(wx.VERTICAL)
        chemical_collection_sizer_h.Add((20, 20), 0, 0, 0)
        chemical_collection_sizer_vl.Add((20, 50), 0, 0, 0)
        chemical_collection_sizer_vl.Add(self.chem_plot_panel, 1, wx.EXPAND, 0)
        chemical_collection_sizer_vl.Add((20, 20), 0, 0, 0)
        chemical_collection_sizer_vl.Add(self.ch_sampling_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        chemical_collection_sizer_h.Add(chemical_collection_sizer_vl, 1, 0, 0)
        chemical_collection_sizer_h.Add((20, 20), 0, 0, 0)
        chemical_collection_sizer_vr.Add((20, 20), 0, 0, 0)
        ch_grid_sizer.Add((20, 20), 0, 0, 0)
        ch_grid_sizer.Add((20, 20), 0, 0, 0)
        ch_grid_sizer.Add((20, 20), 0, 0, 0)
        ch_grid_sizer.Add(self.ch_patient_label, 0, 0, 0)
        ch_grid_sizer.Add(self.ch_patient_name, 0, 0, 0)
        ch_grid_sizer.Add(self.ch_patient_select_button, 0, 0, 3)
        ch_grid_sizer.Add(self.ch_wound_dropdown_label_copy, 0, 0, 0)
        ch_grid_sizer.Add(self.ch_wound_loc, 0, 0, 0)
        ch_grid_sizer.Add(self.ch_wound_new_button, 0, 0, 0)
        ch_grid_sizer.Add(self.ch_assessement_dropdown_label, 0, 0, 0)
        ch_grid_sizer.Add(self.ch_assessment_id, 0, 0, 0)
        ch_grid_sizer.Add(self.ch_assessment_new_button, 0, 0, 0)
        chemical_collection_sizer_vr.Add(ch_grid_sizer, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        chemical_collection_sizer_vr.Add((20, 40), 0, 0, 0)
        chemical_collection_sizer_vr.Add(self.baseline_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        chemical_collection_sizer_vr.Add((20, 20), 0, 0, 0)
        chemical_collection_sizer_vr.Add(self.ch_baseline_msg, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        chemical_collection_sizer_vr.Add((50, 20), 0, 0, 0)
        chemical_collection_sizer_vr.Add(self.baseline_start_stop_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        chemical_collection_sizer_vr.Add((20, 20), 0, 0, 0)
        chemical_collection_sizer_vr.Add(self.baseline_reset_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        chemical_collection_sizer_vr.Add((20, 100), 0, 0, 0)
        chemical_collection_sizer_vr.Add(self.chemical_wound_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        chemical_collection_sizer_vr.Add((20, 20), 0, 0, 0)
        chemical_collection_sizer_vr.Add(self.ch_wound_msg, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        chemical_collection_sizer_vr.Add((20, 20), 0, 0, 0)
        chemical_collection_sizer_vr.Add(self.wound_start_stop_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        chemical_collection_sizer_vr.Add((20, 20), 0, 0, 0)
        chemical_collection_sizer_vr.Add(self.wound_reset_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        chemical_collection_sizer_h.Add(chemical_collection_sizer_vr, 1, wx.EXPAND, 0)
        self.chemical_collection_pane.SetSizer(chemical_collection_sizer_h)
        cv_l_sizer.Add((700, 20), 0, 0, 0)
        sizer_6.Add((20, 360), 0, 0, 0)
        sizer_6.Add(self.rgb_video_panel, 0, 0, 0)
        sizer_6.Add((40, 360), 0, 0, 0)
        cv_l_sizer.Add(sizer_6, 0, wx.EXPAND, 0)
        sizer_7.Add((20, 20), 0, 0, 0)
        sizer_7.Add(self.rgb_video_panel_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_7.Add((40, 20), 0, 0, 0)
        cv_l_sizer.Add(sizer_7, 0, 0, 0)
        lower_video_sizer.Add((20, 240), 0, 0, 0)
        lower_video_sizer.Add(self.depth_video_panel, 1, wx.EXPAND, 0)
        lower_video_sizer.Add((20, 240), 0, 0, 0)
        lower_video_sizer.Add(self.thermal_video_panel, 1, wx.EXPAND, 0)
        lower_video_sizer.Add((20, 240), 0, 0, 0)
        lower_video_sizer.Add((20, 20), 0, 0, 0)
        lower_video_sizer.Add(self.visual_depth_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        lower_video_sizer.Add((20, 20), 0, 0, 0)
        lower_video_sizer.Add(self.visual_thermal_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        lower_video_sizer.Add((20, 20), 0, 0, 0)
        cv_l_sizer.Add(lower_video_sizer, 1, 0, 0)
        collection_sizer_1.Add(cv_l_sizer, 0, wx.EXPAND, 0)
        cv_grid_sizer.Add((20, 20), 0, 0, 0)
        cv_grid_sizer.Add((20, 20), 0, 0, 0)
        cv_grid_sizer.Add((20, 20), 0, 0, 0)
        cv_grid_sizer.Add(self.cv_patient_label, 0, 0, 0)
        cv_grid_sizer.Add(self.patient_name, 0, 0, 0)
        cv_grid_sizer.Add(self.cv_patient_select_button, 0, 0, 3)
        cv_grid_sizer.Add(self.cv_wound_dropdown_label, 0, 0, 0)
        cv_grid_sizer.Add(self.wound_loc, 0, 0, 0)
        cv_grid_sizer.Add(self.cv_wound_new_button, 0, 0, 0)
        cv_grid_sizer.Add(self.cv_assessement_dropdown_label, 0, 0, 0)
        cv_grid_sizer.Add(self.cv_assessment_id, 0, 0, 0)
        cv_grid_sizer.Add(self.cv_assessment_new_button, 0, 0, 0)
        cv_grid_sizer.Add((20, 40), 0, 0, 0)
        cv_grid_sizer.Add((20, 40), 0, 0, 0)
        cv_grid_sizer.Add((20, 40), 0, 0, 0)
        cv_grid_sizer.Add(self.start_stop_button, 0, 0, 2)
        cv_grid_sizer.Add(self.cv_reset_button, 0, 0, 0)
        cv_grid_sizer.Add(self.preview_button, 0, 0, 0)
        cv_r_sizer.Add(cv_grid_sizer, 0, wx.LEFT | wx.TOP | wx.EXPAND, 20)
        cv_r_sizer.Add((20, 30), 0, 0, 0)
        cv_r_sizer.Add(self.visual_msg, 0, wx.EXPAND, 0)
        cv_r_sizer.Add((20, 30), 0, 0, 0)
        sizer_8.Add((120, 20), 0, 0, 0)
        grid_sizer_3.Add((75, 37), 0, 0, 0)
        grid_sizer_3.Add(self.cv_grid_uc, 0, 0, 0)
        grid_sizer_3.Add((75, 37), 0, 0, 0)
        grid_sizer_3.Add(self.cv_grid_ml, 0, 0, 0)
        grid_sizer_3.Add(self.cv_grid_mc, 0, 0, 0)
        grid_sizer_3.Add(self.cv_grid_mr, 0, 0, 0)
        grid_sizer_3.Add((75, 37), 0, 0, 0)
        grid_sizer_3.Add(self.cv_grid_lc, 0, 0, 0)
        grid_sizer_3.Add((75, 37), 0, 0, 0)
        sizer_8.Add(grid_sizer_3, 1, 0, 0)
        cv_r_sizer.Add(sizer_8, 1, 0, 0)
        collection_sizer_1.Add(cv_r_sizer, 1, wx.LEFT | wx.TOP | wx.EXPAND, 10)
        self.visual_collection_pane.SetSizer(collection_sizer_1)
        ms_l_sizer.Add((700, 20), 0, 0, 0)
        sizer_6_copy.Add((20, 360), 0, 0, 0)
        sizer_6_copy.Add(self.rgb_video_panel_copy, 0, 0, 0)
        sizer_6_copy.Add((40, 360), 0, 0, 0)
        ms_l_sizer.Add(sizer_6_copy, 0, 0, 0)
        sizer_7_copy.Add((20, 20), 0, 0, 0)
        sizer_7_copy.Add(self.rgb_video_panel_label_copy, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_7_copy.Add((40, 20), 0, 0, 0)
        ms_l_sizer.Add(sizer_7_copy, 0, wx.EXPAND, 0)
        ms_lower_video_sizer.Add((212, 256), 0, 0, 0)
        ms_lower_video_sizer.Add(self.multi_video_panel, 0, 0, 0)
        ms_lower_video_sizer.Add((232, 256), 0, 0, 0)
        ms_lower_video_sizer.Add((212, 20), 0, 0, 0)
        ms_lower_video_sizer.Add(self.multi_video_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        ms_lower_video_sizer.Add((232, 20), 0, 0, 0)
        ms_l_sizer.Add(ms_lower_video_sizer, 1, 0, 0)
        ms_collection_sizer.Add(ms_l_sizer, 0, 0, 0)
        ms_grid_sizer.Add((20, 20), 0, 0, 0)
        ms_grid_sizer.Add((20, 20), 0, 0, 0)
        ms_grid_sizer.Add((20, 20), 0, 0, 0)
        ms_grid_sizer.Add(self.ms_patient_label, 0, 0, 0)
        ms_grid_sizer.Add(self.ms_patient_name, 0, 0, 0)
        ms_grid_sizer.Add(self.ms_patient_select_button, 0, 0, 3)
        ms_grid_sizer.Add(self.ms_wound_dropdown_label, 0, 0, 0)
        ms_grid_sizer.Add(self.ms_wound_loc, 0, 0, 0)
        ms_grid_sizer.Add(self.ms_wound_new_button, 0, 0, 0)
        ms_grid_sizer.Add(self.ms_assessement_dropdown_label, 0, 0, 0)
        ms_grid_sizer.Add(self.ms_assessment_id, 0, 0, 0)
        ms_grid_sizer.Add(self.ms_assessment_new_button, 0, 0, 0)
        ms_grid_sizer.Add((20, 40), 0, 0, 0)
        ms_grid_sizer.Add((20, 40), 0, 0, 0)
        ms_grid_sizer.Add((20, 40), 0, 0, 0)
        ms_grid_sizer.Add(self.ms_snapshot_button, 0, 0, 2)
        ms_grid_sizer.Add(self.ms_reset_button, 0, 0, 2)
        ms_grid_sizer.Add(self.ms_preview_button, 0, 0, 0)
        ms_r_sizer.Add(ms_grid_sizer, 0, 0, 20)
        ms_r_sizer.Add((20, 30), 0, 0, 0)
        ms_r_sizer.Add(self.ms_msg, 0, wx.EXPAND, 0)
        ms_collection_sizer.Add(ms_r_sizer, 1, 0, 0)
        self.multi_spectral_collection_pane.SetSizer(ms_collection_sizer)
        wm_sizer_l_v.Add((20, 50), 0, 0, 0)
        wm_sizer_l_v.Add(self.wm_3d_panel, 1, wx.EXPAND, 0)
        wm_sizer_l_v.Add(self.wm3d_label, 0, wx.ALIGN_BOTTOM | wx.ALIGN_CENTER_HORIZONTAL, 0)
        wm_sizer_l_v.Add((20, 50), 0, 0, 0)
        wm_sizer_lbh.Add((50, 20), 0, 0, 0)
        wm_sizer_lbmv.Add(self.wm_no_overlay_radio_btn, 0, 0, 0)
        wm_sizer_lbmv.Add(self.wm_rgb_radio_btn, 0, 0, 0)
        wm_sizer_lbmv.Add(self.wm_thermal_radio_btn, 0, 0, 0)
        wm_sizer_lbh.Add(wm_sizer_lbmv, 3, wx.EXPAND, 0)
        wm_sizer_lbh.Add((50, 20), 0, 0, 0)
        wm_sizer_l_v.Add(wm_sizer_lbh, 1, wx.EXPAND, 0)
        wm_sizer.Add(wm_sizer_l_v, 1, wx.EXPAND, 0)
        wm_results_top_sizer.Add((20, 20), 0, 0, 0)
        wm_pwa_grid_sizer.Add(self.wm_patient_label, 0, 0, 0)
        wm_pwa_grid_sizer.Add(self.wm_patient_name, 0, 0, 0)
        wm_pwa_grid_sizer.Add(self.wm_patient_select_button, 0, 0, 3)
        wm_pwa_grid_sizer.Add(self.wm_wound_dropdown_label, 0, 0, 0)
        wm_pwa_grid_sizer.Add(self.wm_wound_loc, 0, 0, 0)
        wm_pwa_grid_sizer.Add((20, 20), 0, 0, 0)
        wm_pwa_grid_sizer.Add(self.wm_assessement_dropdown_label, 0, 0, 0)
        wm_pwa_grid_sizer.Add(self.wm_assessment_id, 0, 0, 0)
        wm_pwa_grid_sizer.Add((20, 20), 0, 0, 0)
        wm_pwa_grid_sizer.Add((20, 40), 0, 0, 0)
        wm_results_top_sizer.Add(wm_pwa_grid_sizer, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        wm_results_top_sizer.Add(self.wm_reslts_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        wm_results_top_sizer.Add((20, 20), 0, 0, 0)
        wm_results_grid_sizer.Add(self.wm_l_label, 0, 0, 0)
        wm_results_grid_sizer.Add(self.wm_length, 0, 0, 0)
        wm_results_grid_sizer.Add(self.wm_w_label, 0, 0, 0)
        wm_results_grid_sizer.Add(self.wm_width, 0, 0, 0)
        wm_results_grid_sizer.Add(self.wm_d_label, 0, 0, 0)
        wm_results_grid_sizer.Add(self.wm_depth, 0, 0, 0)
        wm_results_grid_sizer.Add(self.wm_lw_label, 0, 0, 0)
        wm_results_grid_sizer.Add(self.wm_lw, 0, 0, 0)
        wm_results_grid_sizer.Add(self.wm_a_label, 0, 0, 0)
        wm_results_grid_sizer.Add(self.wm_area, 0, 0, 0)
        wm_results_grid_sizer.Add(self.wm_v_label, 0, 0, 0)
        wm_results_grid_sizer.Add(self.wm_volume, 0, 0, 0)
        wm_results_grid_sizer.Add(self.wm_push_label, 0, 0, 0)
        wm_results_grid_sizer.Add(self.wm_push, 0, 0, 0)
        wm_results_top_sizer.Add(wm_results_grid_sizer, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.wm_results_pane.SetSizer(wm_results_top_sizer)
        wm_historical_top_sizer.Add((20, 20), 0, 0, 0)
        wmh_pwa_grid_sizer.Add(self.wmh_patient_label, 0, 0, 0)
        wmh_pwa_grid_sizer.Add(self.wmh_patient_name, 0, 0, 0)
        wmh_pwa_grid_sizer.Add(self.wmh_patient_select_button, 0, 0, 3)
        wmh_pwa_grid_sizer.Add(self.wmh_wound_dropdown_label, 0, 0, 0)
        wmh_pwa_grid_sizer.Add(self.wmh_wound_loc, 0, 0, 0)
        wmh_pwa_grid_sizer.Add((20, 20), 0, 0, 0)
        wmh_pwa_grid_sizer.Add((20, 40), 0, 0, 0)
        wm_historical_top_sizer.Add(wmh_pwa_grid_sizer, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        wm_historical_top_sizer.Add(self.wm_historical_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        wm_historical_top_sizer.Add((20, 20), 0, 0, 0)
        wm_historical_top_sizer.Add(self.wm_historical_list, 1, wx.EXPAND, 0)
        self.wm_historical_pane.SetSizer(wm_historical_top_sizer)
        self.wound_measurement_notebook.AddPage(self.wm_config_pane, _("Analysis Configuration"))
        self.wound_measurement_notebook.AddPage(self.wm_results_pane, _("Results"))
        self.wound_measurement_notebook.AddPage(self.wm_historical_pane, _("Historical"))
        wm_sizer.Add(self.wound_measurement_notebook, 1, wx.EXPAND, 0)
        self.analysis_measurements_pane.SetSizer(wm_sizer)
        ts_sizer_l_v.Add((20, 20), 0, 0, 0)
        ts_sizer_l_v.Add(self.ts_2d_panel, 1, wx.EXPAND, 0)
        ts_sizer_l_v.Add(self.ts_2d_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        ts_sizer_l_v.Add((20, 20), 0, 0, 0)
        ts_sizer_l_v.Add(self.ts_3d_panel, 1, wx.EXPAND, 0)
        ts_sizer_l_v.Add(self.ts_3d_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        ts_sizer.Add(ts_sizer_l_v, 1, wx.EXPAND, 0)
        ts_results_top_sizer.Add((20, 20), 0, 0, 0)
        ts_pwa_grid_sizer.Add(self.ts_patient_label, 0, 0, 0)
        ts_pwa_grid_sizer.Add(self.ts_patient_name, 0, 0, 0)
        ts_pwa_grid_sizer.Add(self.ts_patient_select_button, 0, 0, 3)
        ts_pwa_grid_sizer.Add(self.ts_wound_dropdown_label, 0, 0, 0)
        ts_pwa_grid_sizer.Add(self.ts_wound_loc, 0, 0, 0)
        ts_pwa_grid_sizer.Add((20, 20), 0, 0, 0)
        ts_pwa_grid_sizer.Add(self.ts_assessement_dropdown_label, 0, 0, 0)
        ts_pwa_grid_sizer.Add(self.ts_assessment_id, 0, 0, 0)
        ts_pwa_grid_sizer.Add((20, 20), 0, 0, 0)
        ts_pwa_grid_sizer.Add((20, 40), 0, 0, 0)
        ts_results_top_sizer.Add(ts_pwa_grid_sizer, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        ts_results_top_sizer.Add((20, 40), 0, 0, 0)
        ts_results_top_sizer.Add(self.ts_results_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        ts_results_top_sizer.Add((20, 20), 0, 0, 0)
        ts_results_grid_sizer.Add(self.ts_granulation_label, 0, 0, 0)
        ts_results_grid_sizer.Add(self.ts_granulation_percentage, 0, 0, 0)
        ts_results_grid_sizer.Add(self.ts_slough_label, 0, 0, 0)
        ts_results_grid_sizer.Add(self.ts_slough_percentage, 0, 0, 0)
        ts_results_grid_sizer.Add(self.ts_eschar_label, 0, 0, 0)
        ts_results_grid_sizer.Add(self.ts_eschar_percentage, 0, 0, 0)
        ts_results_grid_sizer.Add(self.ts_bone_label, 0, 0, 0)
        ts_results_grid_sizer.Add(self.ts_bone_percentage, 0, 0, 0)
        ts_results_grid_sizer.Add(self.ts_staging_label, 0, 0, 0)
        ts_results_grid_sizer.Add(self.ts_staging, 0, 0, 0)
        ts_results_top_sizer.Add(ts_results_grid_sizer, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.ts_results_pane.SetSizer(ts_results_top_sizer)
        ts_historical_top_sizer.Add((20, 20), 0, 0, 0)
        tsh_pwa_grid_sizer.Add(self.tsh_patient_label, 0, 0, 0)
        tsh_pwa_grid_sizer.Add(self.tsh_patient_name, 0, 0, 0)
        tsh_pwa_grid_sizer.Add(self.tsh_patient_select_button, 0, 0, 3)
        tsh_pwa_grid_sizer.Add(self.tsh_wound_dropdown_label, 0, 0, 0)
        tsh_pwa_grid_sizer.Add(self.tsh_wound_loc, 0, 0, 0)
        tsh_pwa_grid_sizer.Add((20, 20), 0, 0, 0)
        tsh_pwa_grid_sizer.Add((20, 40), 0, 0, 0)
        ts_historical_top_sizer.Add(tsh_pwa_grid_sizer, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        ts_historical_top_sizer.Add(self.ts_historical_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        ts_historical_top_sizer.Add((20, 20), 0, 0, 0)
        ts_historical_top_sizer.Add(self.ts_historical_list, 1, wx.EXPAND, 0)
        self.ts_historical_pane.SetSizer(ts_historical_top_sizer)
        self.tissue_segmentation_notebook.AddPage(self.ts_config_pane, _("Analysis Configuratoin"))
        self.tissue_segmentation_notebook.AddPage(self.ts_results_pane, _("Results"))
        self.tissue_segmentation_notebook.AddPage(self.ts_historical_pane, _("Historical"))
        ts_sizer.Add(self.tissue_segmentation_notebook, 1, wx.EXPAND, 0)
        self.analysis_segmentation_pane.SetSizer(ts_sizer)
        th_sizer_l_v.Add((20, 10), 0, 0, 0)
        th_sizer_l_v.Add(self.thermal_2d_pane, 1, wx.EXPAND, 0)
        th_sizer_l_v.Add(self.th_2d_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        th_sizer_l_v.Add((20, 10), 0, 0, 0)
        th_sizer_l_v.Add(self.thermal_3d_panel, 1, wx.EXPAND, 0)
        th_sizer_l_v.Add(self.th_3d_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        th_sizer_l_v.Add((20, 10), 0, 0, 0)
        ts_button_grid_sizer.Add(self.thermal_cont_radio, 0, wx.EXPAND, 0)
        ts_button_grid_sizer.Add((20, 10), 0, 0, 0)
        ts_button_grid_sizer.Add(self.thermal_segmented_radio, 0, wx.EXPAND, 0)
        ts_button_grid_sizer.Add(self.thermal_segment_size, 0, 0, 0)
        th_sizer_l_v.Add(ts_button_grid_sizer, 0, wx.EXPAND, 0)
        th_sizer.Add(th_sizer_l_v, 0, 0, 0)
        th_results_top_sizer.Add((20, 20), 0, 0, 0)
        th_pwa_grid_sizer.Add(self.th_patient_label, 0, 0, 0)
        th_pwa_grid_sizer.Add(self.th_patient_name, 0, 0, 0)
        th_pwa_grid_sizer.Add(self.th_patient_select_button, 0, 0, 3)
        th_pwa_grid_sizer.Add(self.th_wound_dropdown_label, 0, 0, 0)
        th_pwa_grid_sizer.Add(self.th_wound_loc, 0, 0, 0)
        th_pwa_grid_sizer.Add((20, 20), 0, 0, 0)
        th_pwa_grid_sizer.Add(self.th_assessement_dropdown_label, 0, 0, 0)
        th_pwa_grid_sizer.Add(self.th_assessment_id, 0, 0, 0)
        th_pwa_grid_sizer.Add((20, 20), 0, 0, 0)
        th_pwa_grid_sizer.Add((20, 40), 0, 0, 0)
        th_results_top_sizer.Add(th_pwa_grid_sizer, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        th_results_top_sizer.Add((20, 40), 0, 0, 0)
        th_results_top_sizer.Add(self.th_results_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        th_results_top_sizer.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add(self.t_max_label, 0, 0, 0)
        grid_sizer_1.Add(self.t_max, 0, 0, 0)
        grid_sizer_1.Add(self.t_min_label, 0, 0, 0)
        grid_sizer_1.Add(self.t_min, 0, 0, 0)
        grid_sizer_1.Add(self.t_base_label, 0, 0, 0)
        grid_sizer_1.Add(self.t_baseline, 0, 0, 0)
        grid_sizer_1.Add(self.t_sigma_label, 0, 0, 0)
        grid_sizer_1.Add(self.t_sigma, 0, 0, 0)
        grid_sizer_1.Add(self.t_s1_label, 0, 0, 0)
        grid_sizer_1.Add(self.t_segment_1, 0, 0, 0)
        grid_sizer_1.Add(self.t_s2_label, 0, 0, 0)
        grid_sizer_1.Add(self.t_segment_2, 0, 0, 0)
        grid_sizer_1.Add(self.t_s3_label, 0, 0, 0)
        grid_sizer_1.Add(self.t_segment_3, 0, 0, 0)
        grid_sizer_1.Add(self.t_s4_label, 0, 0, 0)
        grid_sizer_1.Add(self.t_segment_4, 0, 0, 0)
        grid_sizer_1.Add(self.t_s5_label, 0, 0, 0)
        grid_sizer_1.Add(self.t_segment_5, 0, 0, 0)
        th_results_top_sizer.Add(grid_sizer_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.th_results_pane.SetSizer(th_results_top_sizer)
        th_historical_top_sizer.Add((20, 20), 0, 0, 0)
        thh_pwa_grid_sizer.Add(self.thh_patient_label, 0, 0, 0)
        thh_pwa_grid_sizer.Add(self.thh_patient_name, 0, 0, 0)
        thh_pwa_grid_sizer.Add(self.thh_patient_select_button, 0, 0, 3)
        thh_pwa_grid_sizer.Add(self.thh_wound_dropdown_label, 0, 0, 0)
        thh_pwa_grid_sizer.Add(self.thh_wound_loc, 0, 0, 0)
        thh_pwa_grid_sizer.Add((20, 20), 0, 0, 0)
        thh_pwa_grid_sizer.Add((20, 40), 0, 0, 0)
        th_historical_top_sizer.Add(thh_pwa_grid_sizer, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        th_historical_top_sizer.Add(self.th_historical_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        th_historical_top_sizer.Add((20, 20), 0, 0, 0)
        th_historical_top_sizer.Add(self.th_historical_list, 1, wx.EXPAND, 0)
        self.th_historical_pane.SetSizer(th_historical_top_sizer)
        self.thermal_profile_notebook.AddPage(self.th_config_pane, _("Analysis Configuration"))
        self.thermal_profile_notebook.AddPage(self.th_results_pane, _("Results"))
        self.thermal_profile_notebook.AddPage(self.th_historical_pane, _("Historical"))
        th_sizer.Add(self.thermal_profile_notebook, 1, wx.EXPAND, 0)
        self.analysis_thermal_pane.SetSizer(th_sizer)
        cs_sizer_l_v.Add((20, 100), 0, 0, 0)
        cs_sizer_l_v.Add(self.chemical_panel, 1, wx.EXPAND, 0)
        cs_sizer_l_v.Add(self.cs_panel_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        cs_sizer.Add(cs_sizer_l_v, 1, wx.EXPAND, 0)
        cs_results_top_sizer.Add((20, 50), 0, 0, 0)
        cs_pwa_grid_sizer.Add(self.cs_patient_label, 0, 0, 0)
        cs_pwa_grid_sizer.Add(self.cs_patient_name, 0, 0, 0)
        cs_pwa_grid_sizer.Add(self.cs_patient_select_button, 0, 0, 3)
        cs_pwa_grid_sizer.Add(self.cs_wound_dropdown_label, 0, 0, 0)
        cs_pwa_grid_sizer.Add(self.cs_wound_loc, 0, 0, 0)
        cs_pwa_grid_sizer.Add((20, 20), 0, 0, 0)
        cs_pwa_grid_sizer.Add(self.cs_assessement_dropdown_label, 0, 0, 0)
        cs_pwa_grid_sizer.Add(self.cs_assessment_id, 0, 0, 0)
        cs_pwa_grid_sizer.Add((20, 20), 0, 0, 0)
        cs_results_top_sizer.Add(cs_pwa_grid_sizer, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        cs_results_top_sizer.Add((20, 40), 0, 0, 0)
        cs_results_top_sizer.Add(self.cs_results_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        cs_results_top_sizer.Add((20, 50), 0, 0, 0)
        self.cs_results_pane.SetSizer(cs_results_top_sizer)
        cs_historical_top_sizer.Add((20, 20), 0, 0, 0)
        csh_pwa_grid_sizer.Add(self.csh_patient_label, 0, 0, 0)
        csh_pwa_grid_sizer.Add(self.csh_patient_name, 0, 0, 0)
        csh_pwa_grid_sizer.Add(self.csh_patient_select_button, 0, 0, 3)
        csh_pwa_grid_sizer.Add(self.csh_wound_dropdown_label, 0, 0, 0)
        csh_pwa_grid_sizer.Add(self.csh_wound_loc, 0, 0, 0)
        csh_pwa_grid_sizer.Add((20, 20), 0, 0, 0)
        csh_pwa_grid_sizer.Add((20, 40), 0, 0, 0)
        cs_historical_top_sizer.Add(csh_pwa_grid_sizer, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        cs_historical_top_sizer.Add(self.cs_historical_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        cs_historical_top_sizer.Add((20, 20), 0, 0, 0)
        cs_historical_top_sizer.Add(self.cs_historical_list, 1, wx.EXPAND, 0)
        self.cs_historical_pane.SetSizer(cs_historical_top_sizer)
        self.chemical_sensing_notebook.AddPage(self.cs_config_pane, _("Analysis Configuration"))
        self.chemical_sensing_notebook.AddPage(self.cs_results_pane, _("Results"))
        self.chemical_sensing_notebook.AddPage(self.cs_historical_pane, _("Historical"))
        cs_sizer.Add(self.chemical_sensing_notebook, 1, wx.EXPAND, 0)
        self.analysis_chemical_pane.SetSizer(cs_sizer)
        clinical_sizer.Add((20, 12), 0, 0, 0)
        clinical_sizer.Add(self.cc_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        clinical_sizer.Add((20, 12), 0, 0, 0)
        grid_sizer_2.Add(self.cc_patient_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_patient_name, 0, 0, 0)
        grid_sizer_2.Add(self.patient_select_button, 0, 0, 3)
        grid_sizer_2.Add(self.cc_wound_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_wound_loc, 0, 0, 0)
        grid_sizer_2.Add(self.cc_wound_button, 0, 0, 3)
        grid_sizer_2.Add(self.assessment_no_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_assessment_no, 0, 0, 0)
        grid_sizer_2.Add(self.cc_assessment_button, 0, 0, 3)
        grid_sizer_2.Add(self.cc_datetime_label, 0, 0, 0)
        sizer_4.Add(self.cc_datepicker, 0, 0, 0)
        sizer_4.Add(self.cc_timepicker, 1, 0, 0)
        grid_sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        grid_sizer_2.Add(self.cc_length_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_length, 0, 0, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        grid_sizer_2.Add(self.cc_width_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_width, 0, 0, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        grid_sizer_2.Add(self.cc_depth_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_depth, 0, 0, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        grid_sizer_2.Add(self.cc_u_depth_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_u_depth, 0, 0, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        grid_sizer_2.Add(self.cc_u_desc_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_u_desc, 0, 0, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        grid_sizer_2.Add(self.cc_staging_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_staging, 0, 0, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        grid_sizer_2.Add(self.cc_bed_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_bed_color, 0, 0, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        grid_sizer_2.Add(self.cc_ex_amt_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_ex_amt, 0, 0, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        grid_sizer_2.Add(self.cc_ex_type_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_ex_type, 0, 0, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        grid_sizer_2.Add(self.cc_granulation_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_granulation_percentage, 0, 0, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        grid_sizer_2.Add(self.cc_slough_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_slough_percentage, 0, 0, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        grid_sizer_2.Add(self.cc_eschar_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_eschar_percentage, 0, 0, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        grid_sizer_2.Add(self.cc_bone_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_bone_percentage, 0, 0, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        grid_sizer_2.Add(self.cc_peri_desc_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_peri_desc, 0, 0, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        grid_sizer_2.Add(self.cc_blanching_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_blanching_exists, 0, 0, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        grid_sizer_2.Add(self.cc_infection_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_infection, 0, wx.EXPAND, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        grid_sizer_2.Add(self.cc_odor_intensity_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_odor_intensity, 0, 0, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        grid_sizer_2.Add(self.cc_odor_description_label, 0, 0, 0)
        grid_sizer_2.Add(self.cc_odor_description, 0, wx.EXPAND, 0)
        grid_sizer_2.Add((20, 10), 0, 0, 0)
        clinical_sizer.Add(grid_sizer_2, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        clinical_sizer.Add((20, 2), 0, 0, 0)
        clinical_button_sizer.Add(self.cc_save_button, 0, 0, 3)
        clinical_button_sizer.Add((20, 20), 0, 0, 0)
        clinical_button_sizer.Add(self.cc_reset_button, 0, 0, 0)
        clinical_sizer.Add(clinical_button_sizer, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.clinical_collection_pane.SetSizer(clinical_sizer)
        self.assessment_notebook.AddPage(self.chemical_collection_pane, _("Collection - Chemical"))
        self.assessment_notebook.AddPage(self.visual_collection_pane, _("Collection - Visual"))
        self.assessment_notebook.AddPage(self.multi_spectral_collection_pane, _("Collection - Multi-Spectral"))
        self.assessment_notebook.AddPage(self.analysis_measurements_pane, _("Analysis - Wound Measurements"))
        self.assessment_notebook.AddPage(self.analysis_segmentation_pane, _("Analysis - Tissue Type Segmentation"))
        self.assessment_notebook.AddPage(self.analysis_thermal_pane, _("Analysis - Thermal Profile"))
        self.assessment_notebook.AddPage(self.analysis_chemical_pane, _("Analysis - Chemical Sensing"))
        self.assessment_notebook.AddPage(self.clinical_collection_pane, _("Clinical"))
        sizer_2.Add(self.assessment_notebook, 1, wx.EXPAND, 0)
        self.panel_1.SetSizer(sizer_2)
        sizer_1.Add(self.panel_1, 1000, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        sizer_1.SetSizeHints(self)
        self.Layout()
        # end wxGlade

    def InitControllers(self):
        """
        Method to initialize various controllers
        """
        global db, measurementAlgorithm
        # set up controllers
        self.clinicalWoundController = ClinicalWoundController(db, ClinicalWoundAssessment, None, None)
        self.experimentController = ExperimentController(db, Experiment, None, None)
        experiment = self.experimentController.getDefaultExperiment(measurementAlgorithm)
        self.assessment_measurements_experiment_id = experiment.id
        self.assessment_segmentation_experiment_id = experiment.id
        self.assessment_temperature_experiment_id = experiment.id
        self.assessmentMeasurementsController = AssessmentMeasurementsController(db, AssessmentMeasurements, OlvAssessmentMeasurements, OlvAssessmentMeasurementsCols)
        self.assessmentSegmentationController = AssessmentSegmentationController(db, AssessmentSegmentation, OlvAssessmentSegmentation, OlvAssessmentSegmentationCols)
        self.assessmentTemperatureController = AssessmentTemperatureController(db, AssessmentTemperature, OlvAssessmentTemperature, OlvAssessmentTemperatureCols)

    def InitMisc(self):
        """
        Method to initialize various misc. items
        """
        # Set up file director
        self.director = PUFileDirector(self.system_config['BASE_FILE_DIRECTORY'])
        self.director.SetSystemType("assessment")
        # Set up biochemical sampling parameters
        self.chemicalBaselineScanValue = int(self.system_config['CHEMICAL_BASELINE_SAMPLE_TIME']) / 10
        self.chemicalWoundScanValue = int(self.system_config['CHEMICAL_SAMPLE_TIME']) / 10
        
        # Start up thermal camera server
        # thermal_camera_server_path = "C:/Program Files (x86)/MICRO-EPSILON Messtechnik GmbH u Co KG/TIM Connect/Imager.exe"
        thermal_camera_server_path = self.system_config['THERMAL_CAMERA_SERVER_PATH']
        (junk,executable) = os.path.split(thermal_camera_server_path)
        # kill old process
        try:
            os.system('taskkill /f /im '+executable)
        except Exception:
            pass
        startupOptions = '/Invisible'
        print "Starting thermal camera server"
        self.thermal_server_process = subprocess.Popen([thermal_camera_server_path, startupOptions])
        print "PID = %d" % (self.thermal_server_process.pid)
        
        # Start up hyperspectral camera server
        hyperspectral_camera_server_path = self.system_config['HYPERSPECTRAL_CAMERA_SERVER_PATH']
        (junk,executable) = os.path.split(hyperspectral_camera_server_path)
        # kill old process
        try:
            os.system('taskkill /f /im '+executable)
        except Exception:
            pass
        print "Starting hyperspectral camera server"
        self.hyperspectral_server_process = subprocess.Popen([hyperspectral_camera_server_path, startupOptions])
        print "PID = %d" % (self.hyperspectral_server_process.pid)
        
        # find touchscreen
        self.touchscreen = None
        for i in range(wx.Display.GetCount()):
            if wx.Display(i).GetGeometry().GetSize() == wx.Size(800, 480):
            #if i == 1:  # BRH
                self.touchscreen = wx.Display(i)
                print "touchscreen is display #%d" % (i)
                print self.touchscreen.GetGeometry().GetPosition()
        # self.touchframe = wx.Frame(self, wx.ID_ANY, "VA-PUPC Touchscreen Input", self.touchscreen.GetGeometry().GetPosition(), self.touchscreen.GetGeometry().GetSize())
        if self.touchscreen:
            self.touchframe = TouchFrame(self, wx.ID_ANY, "VA-PUPC Touchscreen Input", self.touchscreen.GetGeometry().GetPosition(), self.touchscreen.GetGeometry().GetSize())
            self.touchframe.Show()

    def DoNewPatient(self, event):
        """
        Menu handler for adding new patients
        """
        global db
        self.panel_1.Disable()
        olvDialog = OLVDialog(None, db, PatientIdentification, OlvPatientIdentification, OlvPatientIdentificationCols)
        rc = olvDialog.ShowModal()
        olvDialog.Destroy()
        self.panel_1.Enable()
        
    def DoSelectPatient(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Menu handler for selecting a patient to record
        """
        global db
        self.panel_1.Disable()
        olvDialog = OLVDialog(None, db, PatientIdentification, OlvPatientIdentification, OlvPatientIdentificationCols,"Select-Only")
        rc = olvDialog.ShowModal()
        if rc == 0:
            self.currentPatient = olvDialog.getSelectedObject()
            self.patient_id = self.currentPatient.patient_id
            self.patient_name.SetValue(self.currentPatient.patient_name)
            self.director.SetPatientId(self.patient_id)
            self.ms_patient_name.SetValue(self.currentPatient.patient_name)
            self.ch_patient_name.SetValue(self.currentPatient.patient_name)
            self.wm_patient_name.SetValue(self.currentPatient.patient_name)
            self.wmh_patient_name.SetValue(self.currentPatient.patient_name)
            self.ts_patient_name.SetValue(self.currentPatient.patient_name)
            self.tsh_patient_name.SetValue(self.currentPatient.patient_name)
            self.th_patient_name.SetValue(self.currentPatient.patient_name)
            self.thh_patient_name.SetValue(self.currentPatient.patient_name)
            self.cs_patient_name.SetValue(self.currentPatient.patient_name)
            self.csh_patient_name.SetValue(self.currentPatient.patient_name)
            self.cc_patient_name.SetValue(self.currentPatient.patient_name)
            self.PopulateWoundDropDowns()
            self.RefreshTabs()
        olvDialog.Destroy()
        self.panel_1.Enable()

    def OnCloseWindow(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Close handler for main window
        """
        print "...closing"
        if hasattr(self,'thermal_client_process'):
            print "Terminating thermal camera client process"
            self.thermal_client_process.terminate()
        if hasattr(self,'thermal_server_process'):
            print "Terminating thermal camera server process"
            self.thermal_server_process.terminate()
        self.Destroy()
        
    def DoWoundSelect(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Event handler for changing a wound drop-down
        """
        cb = event.GetEventObject()
        print "in DoWoundSelect event handler"
        selNo = event.GetSelection()
        self.woundId = int(cb.GetClientData(event.GetSelection()))
        print "Wound select event hander....woundId = %d" % self.woundId
        if self.woundId > 0:
            # Set other dropdowns
            if cb != self.wound_loc:
                self.wound_loc.SetSelection(selNo)
            if cb != self.ms_wound_loc:
                self.ms_wound_loc.SetSelection(selNo)
            if cb != self.ch_wound_loc:
                self.ch_wound_loc.SetSelection(selNo)
            if cb != self.wm_wound_loc:
                self.wm_wound_loc.SetSelection(selNo)
            if cb != self.wmh_wound_loc:
                self.wmh_wound_loc.SetSelection(selNo)
            if cb != self.ts_wound_loc:
                self.ts_wound_loc.SetSelection(selNo)
            if cb != self.tsh_wound_loc:
                self.tsh_wound_loc.SetSelection(selNo)
            if cb != self.th_wound_loc:
                self.th_wound_loc.SetSelection(selNo)
            if cb != self.thh_wound_loc:
                self.thh_wound_loc.SetSelection(selNo)
            if cb != self.cs_wound_loc:
                self.cs_wound_loc.SetSelection(selNo)
            if cb != self.csh_wound_loc:
                self.csh_wound_loc.SetSelection(selNo)
            if cb != self.cc_wound_loc:
                self.cc_wound_loc.SetSelection(selNo)
            # Set file director
            self.director.SetWoundId(self.woundId)
            self.PopulateAssessmentDropDowns()
            self.assessmentMeasurements = self.assessmentMeasurementsController.getAllByPatientByWoundByExpForOLView(self.patient_id, self.woundId, self.assessment_measurements_experiment_id)
            amcols = OlvAssessmentMeasurementsCols()
            self.wm_historical_list.SetColumns(amcols.getColumnDefinitions())
            self.wm_historical_list.SetObjects(self.assessmentMeasurements)
            self.assessmentSegmentation = self.assessmentSegmentationController.getAllByPatientByWoundByExpForOLView(self.patient_id, self.woundId, self.assessment_segmentation_experiment_id)
            ascols = OlvAssessmentSegmentationCols()
            self.ts_historical_list.SetColumns(ascols.getColumnDefinitions())
            self.ts_historical_list.SetObjects(self.assessmentSegmentation)
            self.assessmentTemperature = self.assessmentTemperatureController.getAllByPatientByWoundByExpForOLView(self.patient_id, self.woundId, self.assessment_temperature_experiment_id)
            # l = len(self.assessmentTemperature)
            # print "Number of assessment temperatures = %d" % l
            atcols = OlvAssessmentTemperatureCols()
            # print atcols.getColumnDefinitions()
            self.th_historical_list.SetColumns(atcols.getColumnDefinitions())
            self.th_historical_list.SetObjects(self.assessmentTemperature)
            self.RefreshTabs()
        
    def RefreshTabs(self):
            tabNo = self.assessment_notebook.GetSelection()
            if tabNo == 0:
                self.visual_collection_pane.Fit()
            elif tabNo == 1:
                self.multi_spectral_collection_pane.Fit()
            elif tabNo == 2:
                self.chemical_collection_pane.Fit()
            elif tabNo == 3:
                x = 3
                # self.analysis_measurements_pane.Fit()
                self.wmh_wound_loc.GetContainingSizer().Layout()
            elif tabNo == 4:
                # self.analysis_segmentation_pane.Fit()
                self.tsh_wound_loc.GetContainingSizer().Layout()
            elif tabNo == 5:
                # self.analysis_thermal_pane.Fit()
                self.thh_wound_loc.GetContainingSizer().Layout()
            elif tabNo == 6:
                self.analysis_chemical_pane.Fit()
            else:
                self.PopulateClinicalCollectionPane()
                # self.clinical_collection_pane.Fit()

    def PopulateWoundDropDowns(self):
        self.wound_loc.Clear()
        self.ms_wound_loc.Clear()
        self.ch_wound_loc.Clear()
        self.wm_wound_loc.Clear()
        self.wmh_wound_loc.Clear()
        self.ts_wound_loc.Clear()
        self.tsh_wound_loc.Clear()
        self.th_wound_loc.Clear()
        self.thh_wound_loc.Clear()
        self.cs_wound_loc.Clear()
        self.csh_wound_loc.Clear()
        self.cc_wound_loc.Clear()
        self.cv_assessment_id.Clear()
        self.ms_assessment_id.Clear()
        self.ch_assessment_id.Clear()
        self.wm_assessment_id.Clear()
        self.ts_assessment_id.Clear()
        self.th_assessment_id.Clear()
        self.cs_assessment_id.Clear()
        self.cc_assessment_no.Clear()
        woundController = WoundAssessmentController(db, WoundAssessment, None, None)
        wounds = woundController.getAllByPatient(self.patient_id)
        firstWound = True
        if len(wounds) > 0:
            for w in wounds:
                if firstWound:
                    self.woundId = w.wound_id
                    firstWound = False
                self.wound_loc.Append(w.wound_location_description, str(w.wound_id))
                self.ms_wound_loc.Append(w.wound_location_description, str(w.wound_id))
                self.ch_wound_loc.Append(w.wound_location_description, str(w.wound_id))
                self.wm_wound_loc.Append(w.wound_location_description, str(w.wound_id))
                self.wmh_wound_loc.Append(w.wound_location_description, str(w.wound_id))
                self.ts_wound_loc.Append(w.wound_location_description, str(w.wound_id))
                self.tsh_wound_loc.Append(w.wound_location_description, str(w.wound_id))
                self.th_wound_loc.Append(w.wound_location_description, str(w.wound_id))
                self.thh_wound_loc.Append(w.wound_location_description, str(w.wound_id))
                self.cs_wound_loc.Append(w.wound_location_description, str(w.wound_id))
                self.csh_wound_loc.Append(w.wound_location_description, str(w.wound_id))
                self.cc_wound_loc.Append(w.wound_location_description, str(w.wound_id))
        else:
            self.woundId = -1
            self.wound_loc.Append("No wounds for this patient", "-1")
            self.ms_wound_loc.Append("No wounds for this patient", "-1")
            self.ch_wound_loc.Append("No wounds for this patient", "-1")
            self.wm_wound_loc.Append("No wounds for this patient", "-1")
            self.wmh_wound_loc.Append("No wounds for this patient", "-1")
            self.ts_wound_loc.Append("No wounds for this patient", "-1")
            self.tsh_wound_loc.Append("No wounds for this patient", "-1")
            self.th_wound_loc.Append("No wounds for this patient", "-1")
            self.thh_wound_loc.Append("No wounds for this patient", "-1")
            self.cs_wound_loc.Append("No wounds for this patient", "-1")
            self.csh_wound_loc.Append("No wounds for this patient", "-1")
            self.cc_wound_loc.Append("No wounds for this patient", "-1")
            self.ch_wound_msg.SetValue('No assessment selected')
            self.ch_baseline_msg.SetValue('No assessment selected')
        self.wound_loc.Select(0)
        self.ms_wound_loc.Select(0)
        self.ch_wound_loc.Select(0)
        self.wm_wound_loc.Select(0)
        self.wmh_wound_loc.Select(0)
        self.ts_wound_loc.Select(0)
        self.tsh_wound_loc.Select(0)
        self.th_wound_loc.Select(0)
        self.thh_wound_loc.Select(0)
        self.cs_wound_loc.Select(0)
        self.csh_wound_loc.Select(0)
        self.cc_wound_loc.Select(0)
        #
        wcEvent = wx.CommandEvent(wx.wxEVT_COMMAND_COMBOBOX_SELECTED,self.wound_loc.GetId())
        wcEvent.SetEventObject(self.wound_loc)
        wx.PostEvent(self.wound_loc, wcEvent)
        # Recalculate size of wound dropdowns
        self.wound_loc.GetContainingSizer().Layout()
        self.ms_wound_loc.GetContainingSizer().Layout()
        self.ch_wound_loc.GetContainingSizer().Layout()
        self.wm_wound_loc.GetContainingSizer().Layout()
        self.wmh_wound_loc.GetContainingSizer().Layout()
        self.ts_wound_loc.GetContainingSizer().Layout()
        self.tsh_wound_loc.GetContainingSizer().Layout()
        self.th_wound_loc.GetContainingSizer().Layout()
        self.thh_wound_loc.GetContainingSizer().Layout()
        self.cs_wound_loc.GetContainingSizer().Layout()
        self.csh_wound_loc.GetContainingSizer().Layout()
        self.cc_wound_loc.GetContainingSizer().Layout()
        
    def PopulateAssessmentDropDowns(self):
        self.cv_assessment_id.Clear()
        self.ms_assessment_id.Clear()
        self.ch_assessment_id.Clear()
        self.wm_assessment_id.Clear()
        self.ts_assessment_id.Clear()
        self.th_assessment_id.Clear()
        self.cs_assessment_id.Clear()
        self.cc_assessment_no.Clear()
        asController = AssessmentSessionController(db, AssessmentSession, None, None)
        assessments = asController.getAllByPatientByWound(self.patient_id, self.woundId)
        if len(assessments) > 0:
            for a in assessments:
                a_str = "%d - %s" % (a.assessment_id, a.start_time.strftime('%m/%d/%Y'))
                self.cv_assessment_id.Append(a_str, str(a.assessment_id))
                self.ms_assessment_id.Append(a_str, str(a.assessment_id))
                self.ch_assessment_id.Append(a_str, str(a.assessment_id))
                self.wm_assessment_id.Append(a_str, str(a.assessment_id))
                self.ts_assessment_id.Append(a_str, str(a.assessment_id))
                self.th_assessment_id.Append(a_str, str(a.assessment_id))
                self.cs_assessment_id.Append(a_str, str(a.assessment_id))
                self.cc_assessment_no.Append(a_str, str(a.assessment_id))
        else:
            self.cv_assessment_id.Append("No assessments for this patient", "-1")
            self.ms_assessment_id.Append("No assessments for this patient", "-1")
            self.ch_assessment_id.Append("No assessments for this patient", "-1")
            self.wm_assessment_id.Append("No assessments for this patient", "-1")
            self.ts_assessment_id.Append("No assessments for this patient", "-1")
            self.th_assessment_id.Append("No assessments for this patient", "-1")
            self.cs_assessment_id.Append("No assessments for this patient", "-1")
            self.cc_assessment_no.Append("No assessments for this patient", "-1")
            self.ch_wound_msg.SetValue('No assessment selected')
            self.ch_baseline_msg.SetValue('No assessment selected')
        self.cv_assessment_id.Select(0)
        self.ms_assessment_id.Select(0)
        self.ch_assessment_id.Select(0)
        self.wm_assessment_id.Select(0)
        self.ts_assessment_id.Select(0)
        self.th_assessment_id.Select(0)
        self.cs_assessment_id.Select(0)
        self.cc_assessment_no.Select(0)
        acEvent = wx.CommandEvent(wx.wxEVT_COMMAND_COMBOBOX_SELECTED,self.cv_assessment_id.GetId())
        acEvent.SetEventObject(self.cv_assessment_id)
        wx.PostEvent(self.cv_assessment_id, acEvent)

    def PopulateClinicalCollectionPane(self):
        self.clinicalAssessment = None
        if self.patient_id > 0 and self.woundId and self.assessmentId > 0:
            self.clinicalAssessment = self.clinicalWoundController.getByPatientByWoundByNo(self.patient_id, self.woundId, self.assessmentId)
        if self.clinicalAssessment is None:
            self.clinicalAssessment = ClinicalWoundAssessment()
            now = datetime.now()
            wxnow = wx.calendar._pydate2wxdate(now)
            wxnow.SetHMS(now.hour,now.minute,now.second)
            self.cc_datepicker.SetValue(wxnow)
            self.cc_timepicker.SetValue(wxnow)
            self.cc_length.SetValue("0.00")
            self.cc_width.SetValue("0.00")
            self.cc_depth.SetValue("0.00")
            self.cc_u_depth.SetValue("0.00")
            self.cc_u_desc.SetValue("")
            self.cc_staging.Select(0)
            self.cc_bed_color.SetValue("")
            self.cc_ex_amt.Select(0)
            self.cc_ex_type.Select(0)
            self.cc_granulation_percentage.SetValue("0")
            self.cc_slough_percentage.SetValue("0")
            self.cc_eschar_percentage.SetValue("0")
            self.cc_bone_percentage.SetValue("0")
            self.cc_peri_desc.SetValue("")
            self.cc_blanching_exists.SetValue(False)
            self.cc_infection.SetValue("")
            self.cc_odor_intensity.Select(0)
            self.cc_odor_description.SetValue("")
        else:
            wxad = wx.calendar._pydate2wxdate(self.clinicalAssessment.assessment_date)
            wxad.SetHMS(self.clinicalAssessment.assessment_date.hour,self.clinicalAssessment.assessment_date.minute,self.clinicalAssessment.assessment_date.second)
            self.cc_datepicker.SetValue(wxad)
            self.cc_timepicker.SetValue(wxad)
            self.cc_length.SetValue(self.clinicalAssessment.length)
            self.cc_width.SetValue(self.clinicalAssessment.width)
            self.cc_depth.SetValue(self.clinicalAssessment.depth)
            self.cc_u_depth.SetValue(self.clinicalAssessment.undermining_depth)
            self.cc_u_desc.SetValue(self.clinicalAssessment.undermining_description)
            val = self.clinicalAssessment.ulcer_stage - 1
            self.cc_staging.Select(val)
            self.cc_bed_color.SetValue(self.clinicalAssessment.bed_color)
            self.cc_ex_amt.SetStringSelection(self.clinicalAssessment.exudate_amount)
            self.cc_ex_type.SetStringSelection(self.clinicalAssessment.exudate_type)
            self.cc_granulation_percentage.SetValue(self.clinicalAssessment.granulation_percentage)
            self.cc_slough_percentage.SetValue(self.clinicalAssessment.slough_percentage)
            self.cc_eschar_percentage.SetValue(self.clinicalAssessment.eschar_percentage)
            self.cc_bone_percentage.SetValue(self.clinicalAssessment.bone_percentage)
            self.cc_peri_desc.SetValue(self.clinicalAssessment.peri_ulcer_area_description)
            self.cc_blanching_exists.SetValue(self.clinicalAssessment.blanching_exists)
            self.cc_infection.SetValue(self.clinicalAssessment.infection_process)
            self.cc_odor_intensity.SetStringSelection(self.clinicalAssessment.odor_intensity)
            self.cc_odor_description.SetValue(self.clinicalAssessment.odor_description)
        
        
    def PopulateMeasurementsResultsPane(self):
        self.assessmentMeasurements = None
        if self.patient_id > 0 and self.woundId and self.assessmentId > 0:
            self.assessmentMeasurements = self.assessmentMeasurementsController.getByPatientByWoundByNoByExp(self.patient_id, self.woundId, self.assessmentId, self.assessment_measurements_experiment_id)
        if self.assessmentMeasurements is None:
            self.wm_length.SetValue("0.00")
            self.wm_width.SetValue("0.00")
            self.wm_depth.SetValue("0.00")
            self.wm_lw.SetValue("0.00")
            self.wm_area.SetValue("0.00")
            self.wm_volume.SetValue("0.00")
            self.wm_push.SetValue("0")
        else:
            self.wm_length.SetValue(self.assessmentMeasurements.length)
            self.wm_width.SetValue(self.assessmentMeasurements.width)
            self.wm_depth.SetValue(self.assessmentMeasurements.depth)
            self.wm_lw.SetValue(self.assessmentMeasurements.length_x_width)
            self.wm_area.SetValue(self.assessmentMeasurements.surface_area)
            self.wm_volume.SetValue(self.assessmentMeasurements.wound_volume)
            self.wm_push.SetValue(self.assessmentMeasurements.push_score)
        
        
    def PopulateSegmentationResultsPane(self):
        self.assessmentSegmentation = None
        if self.patient_id > 0 and self.woundId and self.assessmentId > 0:
            self.assessmentSegmentation = self.assessmentSegmentationController.getByPatientByWoundByNoByExp(self.patient_id, self.woundId, self.assessmentId, self.assessment_measurements_experiment_id)
        if self.assessmentSegmentation is None:
            self.ts_granulation_percentage.SetValue("0.0")
            self.ts_slough_percentage.SetValue("0.0")
            self.ts_eschar_percentage.SetValue("0.0")
            self.ts_bone_percentage.SetValue("0.0")
            self.ts_staging.SetValue("0")
        else:
            self.ts_granulation_percentage.SetValue(self.assessmentSegmentation.granulation_percentage)
            self.ts_slough_percentage.SetValue(self.assessmentSegmentation.slough_percentage)
            self.ts_eschar_percentage.SetValue(self.assessmentSegmentation.eschar_percentage)
            self.ts_bone_percentage.SetValue(self.assessmentSegmentation.bone_percentage)
            self.ts_staging.SetValue(self.assessmentSegmentation.ulcer_stage)
        
        
    def PopulateTemperatureResultsPane(self):
        self.assessmentTemperature = None
        if self.patient_id > 0 and self.woundId and self.assessmentId > 0:
            self.assessmentTemperature = self.assessmentTemperatureController.getByPatientByWoundByNoByExp(self.patient_id, self.woundId, self.assessmentId, self.assessment_measurements_experiment_id)
        if self.assessmentTemperature is None:
            self.t_max.SetValue("0.0")
            self.t_min.SetValue("0.0")
            self.t_baseline.SetValue("0.0")
            self.t_sigma.SetValue("0.000")
            self.t_segment_1.SetValue("0.0")
            self.t_segment_2.SetValue("0.0")
            self.t_segment_3.SetValue("0.0")
            self.t_segment_4.SetValue("0.0")
            self.t_segment_5.SetValue("0.0")
        else:
            self.t_max.SetValue(self.assessmentTemperature.max_temperature)
            self.t_min.SetValue(self.assessmentTemperature.min_temperature)
            self.t_baseline.SetValue(self.assessmentTemperature.baseline_temperature)
            self.t_sigma.SetValue(self.assessmentTemperature.temperature_variation_sigma)
            self.t_segment_1.SetValue(self.assessmentTemperature.temperature_segment_1_percentage)
            self.t_segment_2.SetValue(self.assessmentTemperature.temperature_segment_2_percentage)
            self.t_segment_3.SetValue(self.assessmentTemperature.temperature_segment_3_percentage)
            self.t_segment_4.SetValue(self.assessmentTemperature.temperature_segment_4_percentage)
            self.t_segment_5.SetValue(self.assessmentTemperature.temperature_segment_5_percentage)
        
        
    def DoSelectAssessment(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Event handler for changing an assessment drop-down
        """
        idx = event.GetSelection()
        print "Assessment select event hander....index = %d" % idx
        cb = event.GetEventObject()
        self.assessmentId = int(cb.GetClientData(event.GetSelection()))
        print "Assessment select event hander....assessmentId = %d" % self.assessmentId
        self.cv_assessment_id.Select(idx)
        self.ms_assessment_id.Select(idx)
        self.ch_assessment_id.Select(idx)
        self.wm_assessment_id.Select(idx)
        self.ts_assessment_id.Select(idx)
        self.th_assessment_id.Select(idx)
        self.cs_assessment_id.Select(idx)
        self.cc_assessment_no.Select(idx)
        self.start_stop_button.SetLabel("Record")
        # Disable all buttons on multi-spectral tab
        self.ms_reset_button.Disable()
        self.ms_snapshot_button.Disable()
        # Disable all buttons on biochemical tab
        self.baseline_start_stop_button.Disable()
        self.baseline_reset_button.Disable()
        self.wound_start_stop_button.Disable()
        self.wound_reset_button.Disable()
        # Perform tests of prior sampling
        if self.patient_id > 0 and self.woundId > 0 and self.assessmentId > 0:
            self.director.SetAssessmentId(self.assessmentId)
            self.sessionController = AssessmentSessionController(db, AssessmentSession, OlvAssessmentSession, OlvAssessmentSessionCols)
            self.assessmentSession = self.sessionController.getByPatientByWoundByAssessment(self.patient_id,self.woundId,self.assessmentId)
            if self.assessmentSession.collection_status_chemical and self.assessmentSession.collection_status_chemical != "Not collected":
                self.ch_wound_msg.SetValue(self.assessmentSession.collection_status_chemical)
                self.wound_reset_button.Enable()
            else:
                self.ch_wound_msg.SetValue("Not collected")
                self.wound_start_stop_button.Enable()
            if self.assessmentSession.collection_status_chemical_bl and self.assessmentSession.collection_status_chemical_bl != "Not collected":
                self.ch_baseline_msg.SetValue(self.assessmentSession.collection_status_chemical_bl)
                self.baseline_reset_button.Enable()
            else:
                self.ch_baseline_msg.SetValue("Not collected")
                self.baseline_start_stop_button.Enable()
            if self.assessmentSession.collection_status_visual == "Completed":
                self.start_stop_button.SetLabel("Play")
                if self.previewOn:
                    self.start_stop_button.Enable()
                    self.visual_msg.SetValue("Click Play to enable playback of previously recorded assessment")
                else:
                    self.start_stop_button.Disable()
                    self.visual_msg.SetValue("Click Preview to enable play button")
                self.VisualControl("play")
                self.cv_reset_button.Enable()
                if self.touchscreen:
                    self.touchframe.touch_record_button.Disable()
            else:
                self.start_stop_button.SetLabel("Record")
                if self.previewOn:
                    self.start_stop_button.Enable()
                    if self.touchscreen:
                        self.touchframe.touch_record_button.Enable()
                else:
                    self.start_stop_button.Disable()
                    if self.touchscreen:
                        self.touchframe.touch_record_button.Disable()
                self.VisualControl("")
                self.cv_reset_button.Disable()
            if self.assessmentSession.collection_status_multi_spectral and self.assessmentSession.collection_status_multi_spectral != "Not collected":
                self.ms_msg.SetValue(self.assessmentSession.collection_status_multi_spectral)
                self.ms_snapshot_button.Disable()
                if self.touchscreen:
                    self.touchframe.touch_snapshot_button.Disable()
                self.ms_reset_button.Enable()
            else:
                self.ms_msg.SetValue("Not collected")
                if self.assessmentSession.collection_status_visual == "Completed":
                    self.ms_snapshot_button.Enable()
                    if self.touchscreen:
                        self.touchframe.touch_snapshot_button.Enable()
                else:    
                    self.ms_msg.SetValue("Not collected - collect visual data first!")
                    self.ms_snapshot_button.Disable()
                    if self.touchscreen:
                        self.touchframe.touch_snapshot_button.Disable()
        else:
            self.ms_msg.SetValue('No assessment selected')
            self.ch_wound_msg.SetValue('No assessment selected')
            self.ch_baseline_msg.SetValue('No assessment selected')
            self.start_stop_button.SetLabel("Record")
            self.start_stop_button.Disable()
            self.cv_reset_button.Disable()
            self.ms_snapshot_button.Disable()
            if self.touchscreen:
                self.touchframe.touch_snapshot_button.Disable()
        self.PopulateClinicalCollectionPane()
        self.PopulateMeasurementsResultsPane()
        self.PopulateSegmentationResultsPane()
        self.PopulateTemperatureResultsPane()
        
    def DoNewWound(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Menu handler for adding new wounds
        """
        global db
        self.panel_1.Disable()
        # set up controllers
        woundController = WoundAssessmentController(db, WoundAssessment, None, None)
        woundDialog = AddModifyWoundDialog(woundController, WoundAssessment, db, row=None, title="Add", addRecord=True, patientId=self.patient_id)
        rc = woundDialog.ShowModal()
        woundDialog.Destroy()
        self.PopulateWoundDropDowns()
        self.RefreshTabs()
        self.panel_1.Enable()
        
        
    def DoWoundList(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Menu handler for adding, modifying, deleting wounds
        """
        global db
        self.panel_1.Disable()
        olvDialog = WoundAssessmentDialog(None, db, self.patient_id)
        rc = olvDialog.ShowModal()
        olvDialog.Destroy()
        self.PopulateWoundDropDowns()
        self.RefreshTabs()
        self.panel_1.Enable()

    def DoNewAssessment(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Menu handler for creating a new assessment
        """
        global db
        self.panel_1.Disable()
        sessionController = AssessmentSessionController(db, AssessmentSession, OlvAssessmentSession, OlvAssessmentSessionCols)
        if self.patient_id < 0:
            util.showMessageDialog("Need to select a patient!", "Failure!", wx.ICON_INFORMATION)
            self.panel_1.Enable()
            return
        if self.woundId < 0:
            util.showMessageDialog("Need to select a wound!", "Failure!", wx.ICON_INFORMATION)
            self.panel_1.Enable()
            return
        (rc, msg) = sessionController.createNewAssessment(self.patient_id,self.woundId)
        if rc == 0:
            self.SetStatusText("Successfully created new assessment")
        else:
            util.showMessageDialog(msg, "Failure!", wx.ICON_INFORMATION)
        self.PopulateAssessmentDropDowns()
        self.RefreshTabs()
        self.panel_1.Enable()
        
    def DoAssessmentList(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Menu handler for adding, modifying, deleting assessments
        """
        global db
        self.panel_1.Disable()
        olvDialog = OLVDialog(None, db, AssessmentSession, OlvAssessmentSession, OlvAssessmentSessionCols)
        rc = olvDialog.ShowModal()
        olvDialog.Destroy()
        self.PopulateAssessmentDropDowns()
        self.RefreshTabs()
        self.panel_1.Enable()
        
    def DoAlgorithmList(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Menu handler for adding, modifying, deleting algorithms and algorithm defaults
        """
        global db
        self.panel_1.Disable()
        olvDialog = AlgorithmDialog(None, db)
        rc = olvDialog.ShowModal()
        olvDialog.Destroy()
        self.PopulateAssessmentDropDowns()
        self.RefreshTabs()
        self.panel_1.Enable()
        
    def DoExperimentList(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Menu handler for adding, modifying, deleting experiments and experiment configurations
        """
        global db
        self.panel_1.Disable()
        olvDialog = ExperimentDialog(None, db)
        rc = olvDialog.ShowModal()
        olvDialog.Destroy()
        self.panel_1.Enable()
        
    def OnClinicalSave(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Button handler to save clinical assessment form to the database
        """
        if self.patient_id < 0:
            util.showMessageDialog("Need to select a patient!", "Failure!", wx.ICON_INFORMATION)
            return
        if self.woundId < 0:
            util.showMessageDialog("Need to select a wound!", "Failure!", wx.ICON_INFORMATION)
            return
        if self.assessmentId < 0:
            util.showMessageDialog("Need to select an assessment number or create a new one!", "Failure!", wx.ICON_INFORMATION)
            return
        self.clinicalAssessment = None
        if self.patient_id > 0 and self.woundId and self.assessmentId > 0:
            self.clinicalAssessment = self.clinicalWoundController.getByPatientByWoundByNo(self.patient_id, self.woundId, self.assessmentId)
        if self.clinicalAssessment is None:
            self.clinicalAssessment = ClinicalWoundAssessment()
            self.clinicalAssessment.patient_id = self.patient_id
            self.clinicalAssessment.wound_id = self.woundId
            self.clinicalAssessment.assessment_id = self.assessmentId 
        adate_wx = self.cc_datepicker.GetValue()
        atime_wx = self.cc_timepicker.GetValue(as_wxDateTime=True)
        adate = wx.calendar._wxdate2pydate(adate_wx)
        atime = time(atime_wx.GetHour(),atime_wx.GetMinute(),atime_wx.GetSecond())
        assessmentDate = datetime.combine(adate,atime)
        self.clinicalAssessment.assessment_date = assessmentDate
        self.clinicalAssessment.length = float(self.cc_length.GetValue())
        self.clinicalAssessment.width = float(self.cc_width.GetValue())
        self.clinicalAssessment.depth = float(self.cc_depth.GetValue())
        self.clinicalAssessment.undermining_depth = float(self.cc_u_depth.GetValue())
        self.clinicalAssessment.undermining_description = self.cc_u_desc.GetValue()
        self.clinicalAssessment.ulcer_stage = int(self.cc_staging.GetValue())
        self.clinicalAssessment.bed_color = self.cc_bed_color.GetValue()
        self.clinicalAssessment.exudate_amount = self.cc_ex_amt.GetValue()
        self.clinicalAssessment.exudate_type = self.cc_ex_type.GetValue()
        self.clinicalAssessment.granulation_percentage = float(self.cc_granulation_percentage.GetValue())
        self.clinicalAssessment.slough_percentage = float(self.cc_slough_percentage.GetValue())
        self.clinicalAssessment.eschar_percentage = float(self.cc_eschar_percentage.GetValue())
        self.clinicalAssessment.bone_percentage = float(self.cc_bone_percentage.GetValue())
        self.clinicalAssessment.peri_ulcer_area_description = self.cc_peri_desc.GetValue()
        self.clinicalAssessment.blanching_exists = self.cc_blanching_exists.GetValue()
        self.clinicalAssessment.infection_process = self.cc_infection.GetValue()
        self.clinicalAssessment.odor_intensity = self.cc_odor_intensity.GetValue()
        self.clinicalAssessment.odor_description = self.cc_odor_description.GetValue()
        (o, rc, msg) = self.clinicalWoundController.save(self.clinicalAssessment)
        if rc == 0:
            self.main_frame_statusbar.SetStatusText("Clinical wound assessment saved sucessfully")
        else:
            util.showMessageDialog(msg, "Failure!", wx.ICON_INFORMATION)

        
    def OnClinicalReset(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Button handler to reset clinical assessment form to original database values
        """
        self.PopulateClinicalCollectionPane()
        
    def DoConfigList(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Menu handler for adding, editing, deleting system configuration parameters
        """
        global db
        self.panel_1.Disable()
        olvDialog = OLVDialog(None, db, SystemConfiguration, OlvSystemConfiguration, OlvSystemConfigurationCols)
        rc = olvDialog.ShowModal()
        olvDialog.Destroy()
        self.panel_1.Enable()
        
    def OnStartChemBaseline(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Button handler to start chemical baseline sampling
        """
        global db
        self.baseline_start_stop_button.Disable()
        if hasattr(self,'collector'):
            self.collector.Stop()
        else:
            self.collector = BiochemicalCollection(self.system_config['CHEMICAL_SENSOR_PORT'], db, self.director)
            msg = self.collector.GetMessage()
            if msg:
                self.ch_baseline_msg.SetValue(msg)
                self.baseline_start_stop_button.Enable()
                return
        print "Calling collector.Setup with baseline"
        self.collector.Setup("baseline")
        msg = self.collector.GetMessage()
        if msg:
            self.ch_baseline_msg.SetValue(msg)
            self.baseline_start_stop_button.Enable()
            return
        print "entering collection loop"
        for k in range(self.chemicalBaselineScanValue):
            msg = "Collecting scan " + str(k+1) + " of " + str(self.chemicalBaselineScanValue) + "..."
            print msg
            self.ch_baseline_msg.SetValue(msg)
            self.Update()
            self.collector.Collector()
            msg = self.collector.GetMessage()
            if msg:
                self.ch_baseline_msg.SetValue(msg)
                self.collector.Stop()
                self.baseline_reset_button.Enable()
                return
            f = self.collector.GetFrequencies()
            impedances = self.collector.GetImpedances()
            zr = []
            zi = []
            for z in impedances:
                zr.append(z.real)
                zi.append(z.imag)
            self.chem_axes.clear()
            self.chem_axes.plot(f, zr, 'k', label='Z-real')
            self.chem_axes.plot(f, zi, 'k--', label='Z-imag')
            self.chem_axes.legend(loc='upper right')
            self.chem_canvas.draw()
            self.chem_canvas.flush_events()
        self.collector.Stop()
        self.assessmentSession.collection_status_chemical_bl = "Completed"
        (self.assessmentSession, rc, msg) = self.sessionController.save(self.assessmentSession)
        if rc == 0:
            self.ch_baseline_msg.SetValue("Assessment chemical baseline data collected")
            self.baseline_start_stop_button.Disable()
            self.baseline_reset_button.Enable()
        else:
            self.ch_baseline_msg.SetValue(msg)
            self.baseline_start_stop_button.Enable()
            self.baseline_reset_button.Disable()

    def OnResetChemBaseline(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Button handler to reset chemical baseline sampling
        """
        self.assessmentSession.collection_status_chemical_bl = "Not Collected"
        (self.assessmentSession, rc, msg) = self.sessionController.save(self.assessmentSession)
        if rc == 0:
            self.ch_baseline_msg.SetValue("Not Collected")
            self.baseline_start_stop_button.Enable()
            self.baseline_reset_button.Disable()
        else:
            self.ch_baseline_msg.SetValue("Error resetting sample: "+msg)
            self.baseline_start_stop_button.Disable()
            self.baseline_reset_button.Enable()

    def OnStartChemWound(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Button handler to start chemical wound sampling
        """
        global db
        self.wound_start_stop_button.Disable()
        if hasattr(self,'collector'):
            self.collector.Stop()
        else:
            self.collector = BiochemicalCollection(self.system_config['CHEMICAL_SENSOR_PORT'], db, self.director)
            msg = self.collector.GetMessage()
            if msg:
                self.ch_wound_msg.SetValue(msg)
                self.wound_start_stop_button.Enable()
                return
        print "Calling collector.Setup with wound"
        self.collector.Setup("wound")
        msg = self.collector.GetMessage()
        if msg:
            self.ch_wound_msg.SetValue(msg)
            self.wound_start_stop_button.Enable()
            return
        print "entering collection loop"
        for k in range(self.chemicalWoundScanValue):
            msg = "Collecting scan " + str(k+1) + " of " + str(self.chemicalWoundScanValue) + "..."
            print msg
            self.ch_wound_msg.SetValue(msg)
            self.Update()
            self.collector.Collector()
            msg = self.collector.GetMessage()
            if msg:
                self.ch_wound_msg.SetValue(msg)
                self.collector.Stop()
                self.wound_reset_button.Enable()
                return
            f = self.collector.GetFrequencies()
            impedances = self.collector.GetImpedances()
            zr = []
            zi = []
            for z in impedances:
                zr.append(z.real)
                zi.append(z.imag)
            self.chem_axes.clear()
            self.chem_axes.plot(f, zr, 'k', label='Z-real')
            self.chem_axes.plot(f, zi, 'k--', label='Z-imag')
            self.chem_axes.legend(loc='upper right')
            self.chem_canvas.draw()
            self.chem_canvas.flush_events()
        self.collector.Stop()
        self.assessmentSession.collection_status_chemical = "Completed"
        (self.assessmentSession, rc, msg) = self.sessionController.save(self.assessmentSession)
        if rc == 0:
            self.ch_wound_msg.SetValue("Assessment chemical wound data collected")
            self.wound_start_stop_button.Disable()
            self.wound_reset_button.Enable()
        else:
            self.ch_wound_msg.SetValue(msg)
            self.wound_start_stop_button.Enable()
            self.wound_reset_button.Disable()

    def OnResetChemWound(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Button handler to reset chemical wound sampling
        """
        self.assessmentSession.collection_status_chemical = "Not Collected"
        (self.assessmentSession, rc, msg) = self.sessionController.save(self.assessmentSession)
        if rc == 0:
            self.ch_wound_msg.SetValue("Not Collected")
            self.wound_start_stop_button.Enable()
            self.wound_reset_button.Disable()
        else:
            self.ch_wound_msg.SetValue("Error resetting sample: "+msg)
            self.wound_start_stop_button.Disable()
            self.wound_reset_button.Enable()

    def DoChangePassword(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Menu handler for adding, editing, deleting system configuration parameters
        """
        global db
        self.panel_1.Disable()
        changePasswordDialog = ChangePasswordDialog(None)
        changePasswordDialog.SetDb(db)
        rc = changePasswordDialog.ShowModal()
        # print "rc=%d" % rc
        if rc == 1:
            self.SetStatusText("Password successfully changed")
        changePasswordDialog.Destroy()
        self.panel_1.Enable()

    def InitCanvases(self):
        global db, cameraAlgorithm
        print "in InitCanvases"
        self.experimentController = ExperimentController(db, Experiment, None, None)
        experiment = self.experimentController.getDefaultExperiment(cameraAlgorithm)
        self.experiment_id = experiment.id
        if self.touchscreen:
            self.multi_canvases = AssessmentMultiCameraCanvases (None, 401, "PU3dCanvas", 
                                                             self.rgb_video_panel, 402, "PURgbCanvas",
                                                             self.depth_video_panel, 403, "PUDepthCanvas",
                                                             self.thermal_video_panel, 404, "PUThermalCanvas",
                                                             self.multi_video_panel, 405, "PUMultispectralCanvas",
                                                             self.rgb_video_panel_copy, 406, "PURgbCopyCanvas",
                                                             self.touchframe.rgb_video_touch_panel, 502, "PURgbTouchCanvas",
                                                             self.touchframe.thermal_video_touch_panel, 504, "PUThermalTouchCanvas",
                                                             self.touchframe.multi_video_touch_panel, 505, "PUMultispectralTouchCanvas",
                                                             db, experiment.id)
        else:
            self.multi_canvases = AssessmentMultiCameraCanvases (None, 401, "PU3dCanvas", 
                                                             self.rgb_video_panel, 402, "PURgbCanvas",
                                                             self.depth_video_panel, 403, "PUDepthCanvas",
                                                             self.thermal_video_panel, 404, "PUDepthCanvas",
                                                             self.multi_video_panel, 405, "PUMultispectralCanvas",
                                                             self.rgb_video_panel_copy, 406, "PURgbCopyCanvas",
                                                             None, None, None,
                                                             None, None, None,
                                                             None, None, None,
                                                             db, experiment.id)
        #return  # BRH
#        w3 = self.multi_canvases.Get3dWindow()
        wr = self.multi_canvases.GetRgbWindow()
        wd = self.multi_canvases.GetDepthWindow()
        wt = self.multi_canvases.GetThermalWindow()
        wm = self.multi_canvases.GetMultispectralWindow()
        wr2 = self.multi_canvases.GetRgbCopyWindow()        

        # Set up sizers and layout canvases into windows
        # w3.SetMinSize(wx.Size(640, 480))
#       reconPanelSizer = wx.BoxSizer(wx.VERTICAL)
#        reconPanelSizer.Add(w3, 0, wx.EXPAND, 0, self.multi_canvases.canvas_3d)
#        self.recon_3d_panel.SetSizer(reconPanelSizer)
#        reconPanelSizer.Layout()
        
        #wr.SetMinSize(wx.Size(640, 480))
        rgbPanelSizer = wx.BoxSizer(wx.VERTICAL)
        rgbPanelSizer.Add(wr, 0, wx.EXPAND, 0, self.multi_canvases.canvas_rgb)
        self.rgb_video_panel.SetSizer(rgbPanelSizer)
        rgbPanelSizer.Layout()
        
        # wd.SetMinSize(wx.Size(640, 480))
        depthPanelSizer = wx.BoxSizer(wx.VERTICAL)
        depthPanelSizer.Add(wd, 0, wx.EXPAND, 0, self.multi_canvases.canvas_depth)
        self.depth_video_panel.SetSizer(depthPanelSizer)
        depthPanelSizer.Layout()
        
        # wt.SetMinSize(wx.Size(640, 480))
        thermalPanelSizer = wx.BoxSizer(wx.VERTICAL)
        thermalPanelSizer.Add(wt, 0, wx.EXPAND, 0, self.multi_canvases.canvas_thermal)
        self.thermal_video_panel.SetSizer(thermalPanelSizer)
        thermalPanelSizer.Layout()
        
        # wm.SetMinSize(wx.Size(640, 480))
        multispectralPanelSizer = wx.BoxSizer(wx.VERTICAL)
        multispectralPanelSizer.Add(wm, 0, wx.EXPAND, 0, self.multi_canvases.canvas_multispectral)
        self.multi_video_panel.SetSizer(multispectralPanelSizer)
        multispectralPanelSizer.Layout()
        
        #wr2.SetMinSize(wx.Size(640, 360)) 
        rgbCopyPanelSizer = wx.BoxSizer(wx.VERTICAL)
        rgbCopyPanelSizer.Add(wr2, 0, wx.EXPAND, 0, self.multi_canvases.canvas_rgb_copy)
        self.rgb_video_panel_copy.SetSizer(rgbCopyPanelSizer)
        rgbCopyPanelSizer.Layout()
        
        self.Layout()

        windows = [wr, wd, wt, wm, wr2]
        for window in windows:
            w = window
            while w:
                w.Layout()
                w.Refresh()
                w = w.GetParent()
        
        if self.touchscreen:
            wr_touch = self.multi_canvases.GetRgbTouchWindow()
            wt_touch = self.multi_canvases.GetThermalTouchWindow()
            wm_touch = self.multi_canvases.GetMultispectralTouchWindow()
            
            rgbTouchPanelSizer = wx.BoxSizer(wx.VERTICAL)
            rgbTouchPanelSizer.Add(wr_touch, 0, wx.EXPAND, 0, self.multi_canvases.canvas_rgb_touch)
            self.touchframe.rgb_video_touch_panel.SetSizer(rgbTouchPanelSizer)
            rgbTouchPanelSizer.Layout()
            
            thermalTouchPanelSizer = wx.BoxSizer(wx.VERTICAL)
            thermalTouchPanelSizer.Add(wt_touch, 0, wx.EXPAND, 0, self.multi_canvases.canvas_thermal_touch)
            self.touchframe.thermal_video_touch_panel.SetSizer(thermalTouchPanelSizer)
            thermalTouchPanelSizer.Layout()
            
            multispectralTouchPanelSizer = wx.BoxSizer(wx.VERTICAL)
            multispectralTouchPanelSizer.Add(wm_touch, 0, wx.EXPAND, 0, self.multi_canvases.canvas_multispectral_touch)
            self.touchframe.multi_video_touch_panel.SetSizer(multispectralTouchPanelSizer)
            multispectralTouchPanelSizer.Layout()
            
            self.Layout()

            windows = [wr_touch, wt_touch, wm_touch]
            for window in windows:
                w = window
                while w:
                    w.Layout()
                    w.Refresh()
                    w = w.GetParent()
            
            
        wx.Sleep(3)
        
        # Start up thermal camera client
        thermal_camera_client_path = self.system_config['THERMAL_CAMERA_CLIENT_PATH']
        (junk,executable) = os.path.split(thermal_camera_client_path)
        # kill old process
        try:
            os.system('taskkill /f /im '+executable)
        except Exception:
            pass
        si = subprocess.STARTUPINFO()
        si.dwFlags = subprocess.STARTF_USESTDHANDLES | subprocess.STARTF_USESHOWWINDOW
        si.wShowWindow = 15
        print "Starting thermal camera client"
        self.thermal_client_process = subprocess.Popen(str(thermal_camera_client_path),startupinfo=si)
        print "PID = %d" % (self.thermal_client_process.pid)


    def OnPreviewClick(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Button handler for the preview button
        """
        if self.previewPaused:
            self.multi_canvases.ctrl_.execute_continously()
            self.previewPaused = False
        elif self.previewOn:
            self.multi_canvases.TimeToQuit(event)
            self.previewOn = False
        else:
            self.InitCanvases()
            self.previewOn = True
        if self.patient_id > 0 and self.woundId > 0 and self.assessmentId > 0:
            self.start_stop_button.Enable()
        
    def OnRecordClick(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Button handler for the record/stop/erase button
        """
        btn = event.GetEventObject()
        self.start_stop_button.Disable()
        if self.touchscreen:
            self.touchframe.touch_record_button.Disable()
        if self.activeVisualBtn < 0:
            rgb_folder = self.director.GetRgbFileDirectory()
            depth_folder = self.director.GetDepthFileDirectory()
            thermal_folder = self.director.GetThermalFileDirectory()
            multispectral_folder = self.director.GetMultiSpectralFileDirectory()
            try:
                os.makedirs(rgb_folder)            
            except OSError as exc: # Python >2.5
                if exc.errno == errno.EEXIST and os.path.isdir(rgb_folder):
                    pass
                else: 
                    raise
            try:
                os.makedirs(depth_folder)            
            except OSError as exc: # Python >2.5
                if exc.errno == errno.EEXIST and os.path.isdir(depth_folder):
                    pass
                else: 
                    raise
            try:
                os.makedirs(thermal_folder)            
            except OSError as exc: # Python >2.5
                if exc.errno == errno.EEXIST and os.path.isdir(thermal_folder):
                    pass
                else: 
                    raise
            try:
                os.makedirs(multispectral_folder)            
            except OSError as exc: # Python >2.5
                if exc.errno == errno.EEXIST and os.path.isdir(multispectral_folder):
                    pass
                else: 
                    raise            
            if btn.GetLabelText() == "Record":                
                self.multi_canvases.SetupRecording(rgb_folder, depth_folder, thermal_folder, multispectral_folder)
                self.VisualControl("reset")
                msg = "Position unit over " + self.visualBtnLabels[self.activeVisualBtn] + " portion of wound and click Record"
                self.visual_msg.SetValue(msg)
                self.Update()
                if self.touchscreen:
                    self.touchframe.SetMsg(msg)
            else:
                self.multi_canvases.SetupPlayback(rgb_folder, depth_folder, thermal_folder, multispectral_folder)
                self.VisualControl("playing")
                self.visual_msg.SetValue("Click one of the 5 view buttons to play that clip")
        elif btn.GetLabelText() == "Record":
            msg = "Recording for " + self.system_config['VISUAL_RECORD_TIME'] + " seconds"
            self.visual_msg.SetValue(msg)
            self.Update()
            if self.touchscreen:
                self.touchframe.SetMsg(msg)
            self.multi_canvases.StartRecording(self.activeVisualBtn)
            wx.Sleep(int(self.system_config['VISUAL_RECORD_TIME']))
            self.multi_canvases.StopRecording()
            wx.Bell()
            wx.Bell()
            wx.Bell()
            activeVisualBtnId = self.activeVisualBtn + 800
            self.FindWindowById(activeVisualBtnId).SetLabel(self.visualBtnLabels[self.activeVisualBtn] + "\n(Taken)")
            if self.activeVisualBtn == 5:
                self.assessmentSession.collection_status_visual = "Completed"
                (self.assessmentSession, rc, msg) = self.sessionController.save(self.assessmentSession)
                if rc == 0:
                    self.visual_msg.SetValue("Assessment visual data collected")
                    if self.touchscreen:
                        self.touchframe.SetMsg("Assessment visual data collected")
                    self.start_stop_button.SetLabel("Play")
                    self.start_stop_button.Enable()
                    self.cv_reset_button.Enable()
                    self.VisualControl("playing")
                    self.visual_msg.SetValue("Click one of the 5 view buttons to play that clip")
                    # Set state of multi-spectral pane
                    if self.assessmentSession.collection_status_multi_spectral and self.assessmentSession.collection_status_multi_spectral != "Not collected":
                        self.ms_msg.SetValue(self.assessmentSession.collection_status_multi_spectral)
                        self.ms_snapshot_button.Disable()
                        if self.touchscreen:
                            self.touchframe.touch_snapshot_button.Disable()
                        self.ms_reset_button.Enable()
                    else:
                        self.ms_msg.SetValue("Not collected")
                        self.ms_snapshot_button.Enable()
                        if self.touchscreen:
                            self.touchframe.touch_snapshot_button.Enable()
                    # End of set state of multi-spectral pane
                else:
                    self.visual_msg.SetValue(msg)
                    if self.touchscreen:
                        self.touchframe.SetMsg(msg)
                        self.touchframe.touch_record_button.Disable()
                    self.start_stop_button.Disable()
                    self.cv_reset_button.Enable()
                return
            self.VisualControl("next")
            msg = "Position unit over " + self.visualBtnLabels[self.activeVisualBtn] + " portion of wound and click Record"
            self.visual_msg.SetValue(msg)
            self.Update()
            if self.touchscreen:
                self.touchframe.SetMsg(msg)
        else:
            print "Play button clicked in play mode"
        self.start_stop_button.Enable()
        if self.touchscreen:
            self.touchframe.touch_record_button.Enable()

    def OnPlayClick(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Button handler for the play button
        """
        if self.play_button.GetLabelText() == "Play":
            self.playbackOn = True
            self.play_button.SetLabel("Stop Play")
            rgb_folder = self.director.GetRgbFileDirectory()
            depth_folder = self.director.GetDepthFileDirectory()
            thermal_folder = self.director.GetThermalFileDirectory()
            multispectral_folder = self.director.GetMultiSpectralFileDirectory()
            self.multi_canvases.SetupPlayback(rgb_folder, depth_folder, thermal_folder, multispectral_folder)            
        else:
            self.playbackOn = False
            self.multi_canvases.StopPlayback()
            self.play_button.SetLabel("Play")
        
    def DoVisualNext(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Button handler for the next button
        """
        if self.previewPaused:
            self.multi_canvases.ctrl_.execute_continously()
            self.previewPaused = False
        self.VisualControl('next')

    def DoVisualBack(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Button handler for the back button
        """
        if self.previewPaused:
            self.multi_canvases.ctrl_.execute_continously()
            self.previewPaused = False
        self.VisualControl('back')

    def DoVisualReset(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Button handler to reset visual sampling
        """
        rc = util.showMessageDialog("Do you want to erase this assessment?", "Erase assessment?", flag=wx.YES_NO|wx.ICON_QUESTION)
        if rc == wx.ID_NO:
            return
        self.assessmentSession.collection_status_visual = "Reset"
        (self.assessmentSession, rc, msg) = self.sessionController.save(self.assessmentSession)
        if rc == 0:
            self.director.CleanRgbFileDirectory()
            self.director.CleanDepthFileDirectory()
            self.director.CleanThermalFileDirectory()
            self.visual_msg.SetValue("Not Collected")
            if self.touchscreen:
                self.touchframe.SetMsg("Not Collected")
                self.touchframe.touch_record_button.Enable()
            self.start_stop_button.Enable()
            self.start_stop_button.SetLabel("Record")
            self.cv_reset_button.Disable()
            self.VisualControl('reset')
        else:
            self.visual_msg.SetValue("Error resetting visual sample: "+msg)
            if self.touchscreen:
                self.touchframe.SetMsg("Error resetting visual sample: "+msg)
                self.touchframe.touch_record_button.Disable()
            self.start_stop_button.Disable()
            self.cv_reset_button.Enable()

    def OnMSSnapshotClick(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Button handler to take a multi-spectral sample
        """
        self.multi_canvases.ctrl_.execute_one_step()
        self.previewPaused = True
        multispectral_folder = self.director.GetMultiSpectralFileDirectory()
        try:
            os.makedirs(multispectral_folder)            
        except OSError as exc: # Python >2.5
            if exc.errno == errno.EEXIST and os.path.isdir(multispectral_folder):
                pass
            else: raise            
        self.multi_canvases.proc_.set_hyperspectral_file_directory(str(multispectral_folder))
        self.multi_canvases.proc_.take_hyperspectral_snapshot()
        self.multi_canvases.ctrl_.execute_continously()
        self.assessmentSession.collection_status_multi_spectral = "Completed"
        (self.assessmentSession, rc, msg) = self.sessionController.save(self.assessmentSession)
        if rc == 0:
            self.ms_msg.SetValue("Assessment multi-spectral data collected")
            self.ms_snapshot_button.Disable()
            if self.touchscreen:
                self.touchframe.touch_snapshot_button.Disable()
            self.ms_reset_button.Enable()
        else:
            self.ms_msg.SetValue(msg)
            self.ms_snapshot_button.Enable()
            if self.touchscreen:
                self.touchframe.touch_snapshot_button.Enable()
            self.ms_reset_button.Disable()

    def OnMSResetClick(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Button handler to reset multi-spectral sampling
        """
        rc = util.showMessageDialog("Do you want to erase this assessment?", "Erase assessment?", flag=wx.YES_NO|wx.ICON_QUESTION)
        if rc == wx.ID_NO:
            return
        self.assessmentSession.collection_status_multi_spectral = "Reset"
        (self.assessmentSession, rc, msg) = self.sessionController.save(self.assessmentSession)
        if rc == 0:
            self.director.CleanMultiSpectralFileDirectory()
            self.ms_msg.SetValue("Not Collected")
            self.ms_snapshot_button.Enable()
            if self.touchscreen:
                self.touchframe.touch_snapshot_button.Enable()
            self.ms_reset_button.Disable()
        else:
            self.ms_msg.SetValue("Error resetting sample: "+msg)
            self.ms_snapshot_button.Disable()
            if self.touchscreen:
                self.touchframe.touch_snapshot_button.Disable()
            self.ms_reset_button.Enable()

    def OnMSPreviewClick(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Button handler for the preview button
        """
        if self.previewPaused:
            self.multi_canvases.ctrl_.execute_continously()
            self.previewPaused = False
        elif self.previewOn:
            self.multi_canvases.TimeToQuit(event)
            self.previewOn = False
        else:
            self.InitCanvases()
            self.previewOn = True
        if self.patient_id > 0 and self.woundId > 0 and self.assessmentId > 0:
            self.start_stop_button.Enable()

    def OnTakeSnapshot(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Button handler for a snapshot button
        """
        btnId = event.GetId() - 800
        self.multi_canvases.ctrl_.execute_one_step()
        self.previewPaused = True
        self.multi_canvases.proc_.take_snapshot(btnId)
        if btnId == 8:
            self.assessmentSession.collection_status_visual = "Completed"
            (self.assessmentSession, rc, msg) = self.sessionController.save(self.assessmentSession)
            if rc == 0:
                self.visual_msg.SetValue("Assessment visual data collected")
                self.start_stop_button.Disable()
                self.cv_next_button.Disable()
                self.cv_back_button.Disable()
                self.cv_reset_button.Enable()
            else:
                self.visual_msg.SetValue(msg)
                self.start_stop_button.Enable()
                self.cv_reset_button.Disable()
                return
        event.GetEventObject().Disable()
        
    def VisualControl(self, directionParm):
        """
        Function to manage all the snapshot buttons
        """
        # visualBtnOrder = [4, 1, 7, 3, 5]
        self.visualBtnLabels = ["", "Upper", "", "Left", "Center", "Right", "", "Lower", ""]
        visualBtnNextO = [2, 7, 6, 5, 1, -1, 8, 3, 8]
        visualBtnBackO = [5, 4, 0, 7, -1, 3, 2, 1, 6]
        direction = directionParm
        if not hasattr(self,'activeVisualBtn'):
            direction = 'reset'
        if direction == 'reset':
            for btnId in (801,803,804,805,807):
                self.FindWindowById(btnId).SetLabel(self.visualBtnLabels[btnId-800] + "\n(Not Taken)")
                self.FindWindowById(btnId).Disable()
            self.FindWindowById(804).Enable()
            self.activeVisualBtn = 4
        elif direction == 'next':
            oldBtnId = self.activeVisualBtn + 800
            self.FindWindowById(oldBtnId).Disable()
            self.activeVisualBtn = visualBtnNextO[self.activeVisualBtn]
            if self.activeVisualBtn >= 0:
                newBtnId = self.activeVisualBtn + 800
                self.FindWindowById(newBtnId).Enable()
        elif direction == 'back':
            oldBtnId = self.activeVisualBtn + 800
            self.FindWindowById(oldBtnId).Disable()
            self.activeVisualBtn = visualBtnBackO[self.activeVisualBtn]
            if self.activeVisualBtn >= 0:
                newBtnId = self.activeVisualBtn + 800
                self.FindWindowById(newBtnId).Enable()
        elif direction == 'play':
            for btnId in (801,803,804,805,807):
                self.FindWindowById(btnId).SetLabel(self.visualBtnLabels[btnId-800] + "\n(Taken)")
                self.FindWindowById(btnId).Disable()
            self.activeVisualBtn = -1
        elif direction == 'playing':
            for btnId in (801,803,804,805,807):
                self.FindWindowById(btnId).SetLabel(self.visualBtnLabels[btnId-800] + "\n(Taken)")
                self.FindWindowById(btnId).Enable()
            self.activeVisualBtn = 4
        else:
            for btnId in (801,803,804,805,807):
                self.FindWindowById(btnId).Disable()
            self.activeVisualBtn = -1
    
    def OnSelectSnapshot(self, event):  # wxGlade: MainFrame.<event_handler>
        """
        Event handler view id button to control playback
        """
        if self.start_stop_button.GetLabelText() == "Record":
            return

        btnId = event.GetId() - 800
        print "OnSelectSnapshot button clicked, with btnId = "
        print btnId
        
        self.multi_canvases.StartPlayback(btnId)
        
# end of class MainFrame
class Assessment(wx.App, wx.lib.mixins.inspection.InspectionMixin):
    """
    This class implements the Prevention System GUI.
    It processes a configuration file, creates the main frame, and forces users
    to log into the application
    Methods:
        OnInit() - initializes the GUI
        ReadConfiguration() - processes the main configuration file
    """
    def OnInit(self):
        """
        Initializes the GUI and displays a modal login panel.
        """
        global db
        self.Init(cmd=False)  # initialize the inspection tool
        self.ReadConfiguration()
        wx.InitAllImageHandlers()
        self.mainframe = MainFrame(None, -1, "Assessment", (0,0))
        self.SetTopWindow(self.mainframe)
        self.mainframe.Show(True)
        self.mainframe.Maximize(True)
        self.mainframe.panel_1.Disable()
        # Check if system is not on battery power
        if not util.GetPowerOnline():
            rc = util.showMessageDialog("Computer is running on battery power and not AC power. Please insure unit is plugged into wall outlet and the power strip is turned on.", "Power not connected")
            return 1
        logon = LogonDialog(None)
        logon.SetDb(db)
        rc = logon.ShowModal()
        # print "rc=%d" % rc
        if rc == 1:
            # get system configuration
            systemConfigurationController = SystemConfigurationController(db, SystemConfiguration, None, None)
            self.mainframe.system_config = {}
            config = systemConfigurationController.getAll()
            for conf in config:
                self.mainframe.system_config[conf.parameter_name] = conf.parameter_value
            pprint(self.mainframe.system_config)
            self.mainframe.InitControllers()
            self.mainframe.InitMisc()
            self.mainframe.panel_1.Enable()
            self.mainframe.Show()
            self.mainframe.SetStatusText("Logon successful")
            logon.Destroy()
            return 1
        logon.Destroy()
        self.mainframe.Destroy()
        wx.GetApp().ProcessIdle()
        return 0

    def ReadConfiguration(self):
        """
        Reads main configuration file
        """
        global db
        config = ConfigParser.ConfigParser()
        config.read('resources/prevention.cfg')
        self.dbHost = config.get('MySql-localhost','dbHost')
        print "dbHost = %s" % self.dbHost
        self.dbSchema = config.get('MySql-localhost','dbSchema')
        print "dbSchema = %s" % self.dbSchema
        db = Database(self.dbHost,self.dbSchema)
                    
# end of class assessment

if __name__ == "__main__":
    gettext.install("assessment") # replace with the appropriate catalog name
    print   "creating app"
    print os.path.abspath(".")
    assessment = Assessment(0)
    assessment.MainLoop()
    print "exited MainLoop"